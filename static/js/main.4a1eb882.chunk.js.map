{"version":3,"sources":["token-logo.png","components/Navbar.js","components/Main.js","components/App.js","reportWebVitals.js","index.js"],"names":["Navbar","className","href","target","rel","src","logo","width","height","alt","id","this","props","account","Component","Main","style","paddingTop","scope","window","web3","utils","fromWei","stakingBalance","aceTokenBalance","onSubmit","event","amount","preventDefault","input","value","toString","toWei","stakeTokens","parseFloat","etherBalance","toFixed","type","ref","placeholder","required","fontWeight","fontSize","onClick","unstakeTokens","textAlign","App","a","alert","state","tokenFarm","methods","recieveEther","send","from","ethereum","selectedAddress","eth","getTransactionReceipt","location","reload","sendEther","aceToken","loading","loadWeb3","loadBlockchainData","Web3","request","method","currentProvider","net","getId","networkId","aceTokenData","AceToken","networks","Contract","abi","address","setState","balanceOf","call","tokenFarmData","TokenFarm","getBalance","content","paddingBottom","role","maxWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"896fAAe,MAA0B,uC,OCGnCA,E,4JAEJ,WACE,OACE,sBAAKC,UAAU,gFAAf,UACE,oBAAGC,KAAK,kFACLD,UAAU,sCAAsCE,OAAO,SAASC,IAAI,sBADvE,UAEE,qBAAKC,IAAKC,EAAMC,MAAM,KAAKC,OAAO,KAAKP,UAAU,2BAA2BQ,IAAI,KAFlF,yBAKA,oBAAIR,UAAU,kBAAd,SACE,oBAAIA,UAAU,mDAAd,SACE,uBAAOA,UAAU,aAAjB,SACE,uBAAOS,GAAG,UAAV,SAAqBC,KAAKC,MAAMC,uB,GAbzBC,aAsBNd,ICvBTe,E,4JAEJ,WAAU,IAAD,OACP,OACE,sBAAKL,GAAG,UAAUT,UAAU,OAAOe,MAAO,CAACC,WAAW,QAAtD,UAEE,wBAAOhB,UAAU,gDAAjB,UACE,gCACE,+BACE,oBAAIiB,MAAM,MAAV,6BACA,oBAAIA,MAAM,MAAV,iCAGJ,gCACE,+BACE,+BAAKC,OAAOC,KAAKC,MAAMC,QAAQX,KAAKC,MAAMW,eAAgB,SAA1D,UACA,+BAAKJ,OAAOC,KAAKC,MAAMC,QAAQX,KAAKC,MAAMY,gBAAiB,SAA3D,kBAKN,sBAAKvB,UAAU,YAAf,UAEE,sBAAKA,UAAU,YAAf,UAEE,uBAAMA,UAAU,OAAOwB,SAAU,SAACC,GAE9B,IAAIC,EADJD,EAAME,iBAEND,EAAS,EAAKE,MAAMC,MAAMC,WAC1BJ,EAASR,OAAOC,KAAKC,MAAMW,MAAML,EAAQ,SACzC,EAAKf,MAAMqB,YAAYN,IAL3B,UAOE,gCACE,uBAAO1B,UAAU,aAAjB,SAA8B,+CAC9B,uBAAMA,UAAU,yBAAhB,sBACaiC,WAAWvB,KAAKC,MAAMuB,cAAcC,QAAQ,GADzD,aAIF,qBAAKnC,UAAU,mBAAf,SACE,uBACEoC,KAAK,OACLC,IAAK,SAACT,GAAY,EAAKA,MAAQA,GAC/B5B,UAAU,+BACVsC,YAAY,IACZC,UAAQ,MAEZ,wBAAQH,KAAK,SAASpC,UAAU,mCAAmCe,MAAO,CAACyB,WAAY,OAAvF,sBAGF,wBACEJ,KAAK,SACLpC,UAAU,gCACVe,MAAO,CAACyB,WAAY,OAAQC,SAAU,QACtCC,QAAS,SAACjB,GACRA,EAAME,iBACN,EAAKhB,MAAMgC,iBANf,wBAWF,8BACE,mBAAG3C,UAAU,iBAAiBe,MAAO,CAAC6B,UAAW,UAAjD,gDAEF,iC,GA/DS/B,aAuEJC,IChET+B,G,yDA2GJ,WAAYlC,GAAQ,IAAD,8BACjB,cAAMA,IA1CRqB,YAyCmB,uCAzCL,WAAMN,GAAN,SAAAoB,EAAA,2DACRpB,GAAU,GADF,gBAEVqB,MAAM,gCAFI,sCAKJ,EAAKC,MAAMC,UAAUC,QAAQC,eAAeC,KAAK,CAAEC,KAAMnC,OAAOoC,SAASC,gBAAiB1B,MAAOH,IAL7F,OAQ4C,MAAnDR,OAAOC,KAAKqC,IAAIC,sBAAsB,UACvCV,MAAM,qEAGNA,MAAM,uCACN7B,OAAOwC,SAASC,UAbR,2CAyCK,wDApBnBhB,cAoBmB,sBApBH,sBAAAG,EAAA,2DACX,EAAKE,MAAM1B,eAAiB,GADjB,gCAEN,EAAK0B,MAAMC,UAAUC,QAAQU,YAAYR,KAAK,CAAEC,KAAMnC,OAAOoC,SAASC,kBAFhE,OAK0C,MAAnDrC,OAAOC,KAAKqC,IAAIC,sBAAsB,UACvCV,MAAM,qEAGNA,MAAM,uCACN7B,OAAOwC,SAASC,UAVN,sBAcZZ,MAAM,kCAdM,2CAsBd,EAAKC,MAAQ,CACXa,SAAU,GACVZ,UAAW,GACX1B,gBAAiB,IACjBD,eAAgB,IAChBY,aAAc,IACd4B,SAAS,GARM,E,6FAzGnB,sBAAAhB,EAAA,sEACQpC,KAAKqD,WADb,uBAEQrD,KAAKsD,qBAFb,gD,mHAOA,sBAAAlB,EAAA,0DAGM5B,OAAOoC,SAHb,uBAIIpC,OAAOC,KAAO,IAAI8C,IAAK/C,OAAOoC,UAJlC,SAKUpC,OAAOoC,SAASY,QAAQ,CAAEC,OAAQ,wBAL5C,6BASWjD,OAAOC,KACdD,OAAOC,KAAO,IAAI8C,IAAK/C,OAAOC,KAAKiD,iBAInClD,OAAO6B,MAAM,sEAdjB,2C,6HAoBA,4CAAAD,EAAA,6DAEQ3B,EAAOD,OAAOC,KAFtB,SAG0BA,EAAKqC,IAAIa,IAAIC,QAHvC,UAGQC,EAHR,SAMQC,EAAeC,EAASC,SAASH,IANzC,wBAQUV,EAAW,IAAI1C,EAAKqC,IAAImB,SAASF,EAASG,IAAKJ,EAAaK,SAClEnE,KAAKoE,SAAS,CAAEjB,aATpB,UAUgCA,EAASX,QAAQ6B,UAAU7D,OAAOoC,SAASC,iBAAiByB,OAV5F,QAUQzD,EAVR,OAWIb,KAAKoE,SAAS,CAAEvD,gBAAiBA,EAAgBO,aAXrD,wBAaIZ,OAAO6B,MAAM,uDAbjB,aAiBQkC,EAAgBC,EAAUR,SAASH,IAjB3C,wBAmBUtB,EAAY,IAAI9B,EAAKqC,IAAImB,SAASO,EAAUN,IAAKK,EAAcJ,SACrEnE,KAAKoE,SAAS,CAAE7B,cApBpB,UAqB+BA,EAAUC,QAAQ5B,eAAeJ,OAAOoC,SAASC,iBAAiByB,OArBjG,QAqBQ1D,EArBR,OAsBIZ,KAAKoE,SAAS,CAAExD,eAAgBA,EAAeQ,aAtBnD,wBAwBIZ,OAAO6B,MAAM,wDAxBjB,yBA4B2B7B,OAAOC,KAAKqC,IAAI2B,WAAWjE,OAAOoC,SAASC,iBA5BtE,QA4BMrB,EA5BN,OA6BEA,EAAehB,OAAOC,KAAKC,MAAMC,QAAQa,EAAaJ,WAAY,SAClEpB,KAAKoE,SAAS,CAAE5C,aAAcA,IAE9BxB,KAAKoE,SAAS,CAAEhB,SAAS,IAhC3B,iD,0EA2FA,WACE,IAAIsB,EAoCJ,OAjCIA,EAFD1E,KAAKsC,MAAMc,QACT5C,OAAOoC,SAASC,gBAEjB,qBAAKvD,UAAU,cAAf,SACE,mBAAGS,GAAG,SAAST,UAAU,eAAee,MAAO,CAACC,WAAY,SAA5D,+BAKF,sBAAKhB,UAAU,cAAf,UACE,mBAAGS,GAAG,SAAST,UAAU,8BAA8Be,MAAO,CAACC,WAAY,SAA3E,0CACA,mBAAGP,GAAG,SAAST,UAAU,eAAee,MAAO,CAACC,WAAY,OAAQqE,cAAe,QAAnF,iDACA,wBACEjD,KAAK,SACLpC,UAAU,kBACVe,MAAO,CAACyB,WAAY,OAAQC,SAAU,QACtCC,QAAO,uCAAE,WAAMjB,GAAN,SAAAqB,EAAA,sEACD5B,OAAOoC,SAASY,QAAQ,CAAEC,OAAQ,wBADjC,OAEPjD,OAAOwC,SAASC,SAFT,2CAAF,sDAJT,wBAcM,cAAC,EAAD,CACRzB,aAAcxB,KAAKsC,MAAMd,aACzBX,gBAAiBb,KAAKsC,MAAMzB,gBAC5BD,eAAgBZ,KAAKsC,MAAM1B,eAC3BU,YAAatB,KAAKsB,YAClBW,cAAejC,KAAKiC,gBAKtB,gCACE,cAAC,EAAD,CAAQ/B,QAASM,OAAOoC,SAASC,kBACjC,qBAAKvD,UAAU,uBAAf,SACE,qBAAKA,UAAU,MAAf,SACE,sBAAMsF,KAAK,OAAOtF,UAAU,4BAA4Be,MAAO,CAAEwE,SAAU,SAA3E,SACE,qBAAKvF,UAAU,0BAAf,SAEGoF,iB,GArKCvE,cAgLHgC,IC7KA2C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4a1eb882.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/token-logo.279da100.png\";","import React, { Component } from 'react'\nimport logo from '../token-logo.png'\n\nclass Navbar extends Component {\n\n  render() {\n    return (\n      <nav className=\"navbar nav-fill w-100 navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n        <a href='https://ropsten.etherscan.io/address/0xe0b76e8069f082f446Bc626d5E9Ec4C4c71fC043' \n           className=\"navbar-brand col-sm-3 col-md-2 mr-0\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <img src={logo} width=\"35\" height=\"35\" className=\"d-inline-block align-top\" alt=\"\" />\n          &nbsp; Ace Token Farm\n        </a>\n        <ul className=\"navbar-nav px-3\">\n          <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n            <small className=\"text-light\">\n              <small id=\"account\">{this.props.account}</small>\n            </small>\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from 'react'\n\nclass Main extends Component {\n\n  render() {\n    return (\n      <div id=\"content\" className=\"mt-3\" style={{paddingTop:\"40px\"}}>\n\n        <table className=\"table table-borderless text-muted text-center\">\n          <thead>\n            <tr>\n              <th scope=\"col\">Staking Balance</th>\n              <th scope=\"col\">Reward Balance</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>{window.web3.utils.fromWei(this.props.stakingBalance, 'Ether')} ETH</td>\n              <td>{window.web3.utils.fromWei(this.props.aceTokenBalance, 'Ether')} ACE</td>\n            </tr>\n          </tbody>\n        </table>\n\n        <div className=\"card mb-4\">\n\n          <div className=\"card-body\">\n\n            <form className=\"mb-3\" onSubmit={(event) => {\n                event.preventDefault()\n                let amount\n                amount = this.input.value.toString()\n                amount = window.web3.utils.toWei(amount, 'Ether')\n                this.props.stakeTokens(amount)\n              }}>\n              <div>\n                <label className=\"float-left\"><b>Stake Tokens</b></label>\n                <span className=\"float-right text-muted\">\n                  Balance: { parseFloat(this.props.etherBalance).toFixed(4) } ETH\n                </span>\n              </div>\n              <div className=\"input-group mb-4\">\n                <input\n                  type=\"text\"\n                  ref={(input) => { this.input = input }}\n                  className=\"form-control form-control-lg\"\n                  placeholder=\"0\"\n                  required />\n              </div>\n              <button type=\"submit\" className=\"btn btn-primary btn-block btn-lg\" style={{fontWeight: '500'}}>STAKE</button>\n            </form>\n\n            <button\n              type=\"submit\"\n              className=\"btn btn-link btn-block btn-sm\"\n              style={{fontWeight: 'bold', fontSize: '14px'}}\n              onClick={(event) => {\n                event.preventDefault()\n                this.props.unstakeTokens()\n              }}>\n                UNSTAKE\n              </button>\n          </div>\n          <div>\n            <p className=\"h6 text-danger\" style={{textAlign: 'center'}}>Connect to the Ropsten network! </p>\n          </div>\n          <br/>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React, { Component } from 'react'\nimport Web3 from 'web3'\nimport AceToken from '../abis/AceToken.json'\nimport TokenFarm from '../abis/TokenFarm.json'\nimport Navbar from './Navbar'\nimport Main from './Main'\nimport './App.css'\n\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n\n  // Detect MetaMask and Connect to current account\n  async loadWeb3() {\n\n    // Check for Metamask\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.request({ method: 'eth_requestAccounts' })\n    }\n\n    //Check for other wallets\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n\n    else {\n      window.alert('No Ethereum wallets detected. You should consider trying MetaMask!')\n    }\n  }\n\n\n  // Loading the Data from Chain\n  async loadBlockchainData() {\n\n    const web3 = window.web3\n    const networkId = await web3.eth.net.getId()\n\n    // Load AceToken\n    const aceTokenData = AceToken.networks[networkId]\n    if(aceTokenData) {\n      const aceToken = new web3.eth.Contract(AceToken.abi, aceTokenData.address)\n      this.setState({ aceToken })\n      let aceTokenBalance = await aceToken.methods.balanceOf(window.ethereum.selectedAddress).call()\n      this.setState({ aceTokenBalance: aceTokenBalance.toString() })\n    } else {\n      window.alert('AceToken contract not deployed to detected network.')\n    }\n\n    // Load TokenFarm\n    const tokenFarmData = TokenFarm.networks[networkId]\n    if(tokenFarmData) {\n      const tokenFarm = new web3.eth.Contract(TokenFarm.abi, tokenFarmData.address)\n      this.setState({ tokenFarm })\n      let stakingBalance = await tokenFarm.methods.stakingBalance(window.ethereum.selectedAddress).call()\n      this.setState({ stakingBalance: stakingBalance.toString() })\n    } else {\n      window.alert('TokenFarm contract not deployed to detected network.')\n    }\n\n    // Current Ethereum Balance\n    let etherBalance = await window.web3.eth.getBalance(window.ethereum.selectedAddress)\n    etherBalance = window.web3.utils.fromWei(etherBalance.toString(), 'Ether')\n    this.setState({ etherBalance: etherBalance })\n\n    this.setState({ loading: false })\n  }\n\n\n  // Stake ETH into the Contract\n  stakeTokens = async(amount) => {\n    if( amount <= 0 ) {\n      alert(\"Please enter a valid amount!\");\n    }\n    else {\n      await this.state.tokenFarm.methods.recieveEther().send({ from: window.ethereum.selectedAddress, value: amount});\n      \n      // Checking transaction status\n      if(window.web3.eth.getTransactionReceipt(\"{hash}\") == null) {\n        alert(\"Transaction failed! Please check your transaction and try again.\");\n      }\n      else {\n        alert(\"Transaction confirmed successfully!\");\n        window.location.reload()\n      }\n\n    }\n  }\n\n\n  // Unstake ETH to user wallet\n  unstakeTokens = async() => {\n    if(this.state.stakingBalance > 0) {\n      await this.state.tokenFarm.methods.sendEther().send({ from: window.ethereum.selectedAddress })\n\n      // Checking transaction status\n      if(window.web3.eth.getTransactionReceipt(\"{hash}\") == null) {\n        alert(\"Transaction failed! Please check your transaction and try again.\");\n      }\n      else {\n        alert(\"Transaction confirmed successfully!\");\n        window.location.reload()\n      }\n    }\n    else {\n      alert(\"Not enough balance to unstake!\");\n    }\n\n  }\n\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      aceToken: {},\n      tokenFarm: {},\n      aceTokenBalance: '0',\n      stakingBalance: '0',\n      etherBalance: '0',\n      loading: true\n    }\n  }\n\n  \n  render() {\n    let content\n    if(this.state.loading) {\n      if(window.ethereum.selectedAddress) {\n        content = \n        <div className=\"text-center\">\n          <p id=\"loader\" className=\"h5 text-bold\" style={{paddingTop: '100px'}}>Loading data...</p>\n        </div>\n      }\n      else {\n        content = \n        <div className=\"text-center\">\n          <p id=\"loader\" className=\"h5 text-bold text-secondary\" style={{paddingTop: '100px'}}>Looking for some ACE Tokens?</p>\n          <p id=\"loader\" className=\"h5 text-bold\" style={{paddingTop: '15px', paddingBottom: '15px'}}>Connect Ropsten wallet to continue.</p>\n          <button\n            type=\"submit\"\n            className=\"btn btn-success\"\n            style={{fontWeight: 'bold', fontSize: '15px'}}\n            onClick={async(event) => {\n              await window.ethereum.request({ method: 'eth_requestAccounts' });\n              window.location.reload();\n            }}>\n              Connect\n          </button>\n        </div>\n      }\n    } \n    else {\n      content = <Main\n        etherBalance={this.state.etherBalance}\n        aceTokenBalance={this.state.aceTokenBalance}\n        stakingBalance={this.state.stakingBalance}\n        stakeTokens={this.stakeTokens}\n        unstakeTokens={this.unstakeTokens}\n      />\n    }\n\n    return (\n      <div>\n        <Navbar account={window.ethereum.selectedAddress} />\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '600px' }}>\n              <div className=\"content mr-auto ml-auto\">\n\n                {content}\n\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}