{
  "contractName": "TokenFarm",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract AceToken",
          "name": "_aceToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "aceToken",
      "outputs": [
        {
          "internalType": "contract AceToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasStaked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isStaking",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "issueTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendEther",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recieveEther",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function",
      "payable": true
    },
    {
      "inputs": [],
      "name": "showBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract AceToken\",\"name\":\"_aceToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"aceToken\",\"outputs\":[{\"internalType\":\"contract AceToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recieveEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Alfred Varghese Jose\",\"details\":\"ETH is the crypto asset used currently for staking\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Owner variable set as contract creator for future use\",\"params\":{\"_aceToken\":\"Reference to an AceToken instance used for initializing TokenFarm contract\"}},\"issueTokens()\":{\"details\":\"Addresses in stakers array will recieve dividends equal to their current staking balance\"},\"recieveEther()\":{\"details\":\"Same value of ACE Tokens are rewarded to the investor\"},\"sendEther()\":{\"details\":\"Entire ETH staking balance is paid back to the investor\"},\"showBalance()\":{\"returns\":{\"_0\":\"Staking balance of the investor\"}}},\"title\":\"Contract for Yield Farming\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"hasStaked(address)\":{\"notice\":\"Mapping of investors staking status\"},\"issueTokens()\":{\"notice\":\"Allows contract owners to issue dividends for investors\"},\"recieveEther()\":{\"notice\":\"Allows users to stake their crypto assets\"},\"sendEther()\":{\"notice\":\"Allows users to unstake their crypto assets\"},\"showBalance()\":{\"notice\":\"Returns the staking balance of an investor\"},\"stakers(uint256)\":{\"notice\":\"List of all the current investors\"},\"stakingBalance(address)\":{\"notice\":\"Mapping of investor address and their staking balance\"}},\"notice\":\"Allows users to stake their crypto assets and get ACE Token Rewards\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/src/contracts/TokenFarm.sol\":\"TokenFarm\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2ebbbe6d0011175bd9e7268b83de3f9c2f9d8d4cbfbaef12aff977d7d727163\",\"dweb:/ipfs/Qmd5c7Vxtis9wzkDNhxwc6A2QT5H9xn9kfjhx7qx44vpro\"]},\"@openzeppelin/contracts/security/Pausable.sol\":{\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72b957861691ebdaa78c52834465c4f8296480fe4f1a12ba72dc6c0c8ac076dd\",\"dweb:/ipfs/QmVz1sHCwgEivHPRDswdt9tdvky7EnWqFmbuk1wFE55VMG\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b34655953d18ba3a45b762fb6bdbb6549af69a27435e10ece178742bf70baf45\",\"dweb:/ipfs/QmcqjUoFLLMyx7dbwSHUnDBH6aphkVHXWQvQRRev5EAWEh\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://087318b21c528119f649899f5b5580566dd8d7b0303d4904bd0e8580c3545f14\",\"dweb:/ipfs/Qmbn5Mj7aUn8hJuQ8VrQjjEXRsXyJKykgnjR9p4C3nfLtL\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"keccak256\":\"0xf98cb1651a90d20ef77d8c1dd10d5fce4954e747603e5672a8292bd4368120dd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://76b539a8edd558b010d1ff3e462c5d4edd039b790b91f31a5bce18957655cc9f\",\"dweb:/ipfs/QmSdJehhx1SwCWLSFFgHQTmUY2YwDTBQjTVjkmhXhA1srb\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d4c3df1a7ca104b633a7d81c6c6f5192367d150cd5a32cba81f7f27012729013\",\"dweb:/ipfs/QmSim72e3ZVsfgZt8UceCvbiSuMRHR6WDsiamqNzZahGSY\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://26e8b38a7ac8e7b4463af00cf7fff1bf48ae9875765bf4f7751e100124d0bc8c\",\"dweb:/ipfs/QmWcsmkVr24xmmjfnBQZoemFniXjj3vwT78Cz6uqZW1Hux\"]},\"project:/src/contracts/AceToken.sol\":{\"keccak256\":\"0xd073223d600b94b8254037ae691514a3f7bfef093c33b96761cae84e72f9383c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://199895bbd72661c015b464c45d5a5549f1fe262c6a9050039641eb81b093feb9\",\"dweb:/ipfs/QmbPh6GPuuzAatq6DJkvmJMaMb7d8xcuEce5AgnZtwRrjd\"]},\"project:/src/contracts/TokenFarm.sol\":{\"keccak256\":\"0xab37b3a8382620686ebd55819b0a7c0bf9eea47b37e2d0631a56885780b603cb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://20d31743c8916cfd3dd105a9386ab6f6fc58761f37317a51d65c28d946a30e70\",\"dweb:/ipfs/QmSax2y5rRxWAWxwKLYXpiTPuxdcnQKGre3sEWBmzZuVV6\"]}},\"version\":1}",
  "bytecode": "0x60806040526040518060400160405280600f81526020017f4461707020546f6b656e204661726d000000000000000000000000000000000081525060009080519060200190620000519291906200010e565b503480156200005f57600080fd5b5060405162001325380380620013258339818101604052810190620000859190620001d5565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620002c8565b8280546200011c9062000249565b90600052602060002090601f0160209004810192826200014057600085556200018c565b82601f106200015b57805160ff19168380011785556200018c565b828001600101855582156200018c579182015b828111156200018b5782518255916020019190600101906200016e565b5b5090506200019b91906200019f565b5090565b5b80821115620001ba576000816000905550600101620001a0565b5090565b600081519050620001cf81620002ae565b92915050565b600060208284031215620001e857600080fd5b6000620001f884828501620001be565b91505092915050565b60006200020e8262000229565b9050919050565b6000620002228262000201565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060028204905060018216806200026257607f821691505b602082108114156200027957620002786200027f565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b620002b98162000215565b8114620002c557600080fd5b50565b61104d80620002d86000396000f3fe60806040526004361061009c5760003560e01c806381b2d07b1161006457806381b2d07b146101745780638da5cb5b1461019f5780638f4062d7146101ca578063958285a1146101d4578063c93c8f34146101ff578063fd5e6dd11461023c5761009c565b806306fdde03146100a15780630e29df22146100cc57806345bc78ab146100e357806360ab5852146101205780636f49712b14610137575b600080fd5b3480156100ad57600080fd5b506100b6610279565b6040516100c39190610cbf565b60405180910390f35b3480156100d857600080fd5b506100e1610307565b005b3480156100ef57600080fd5b5061010a60048036038101906101059190610aec565b6104b4565b6040516101179190610d41565b60405180910390f35b34801561012c57600080fd5b506101356104cc565b005b34801561014357600080fd5b5061015e60048036038101906101599190610aec565b6106eb565b60405161016b9190610c89565b60405180910390f35b34801561018057600080fd5b5061018961070b565b6040516101969190610d41565b60405180910390f35b3480156101ab57600080fd5b506101b4610752565b6040516101c19190610c45565b60405180910390f35b6101d2610778565b005b3480156101e057600080fd5b506101e9610a28565b6040516101f69190610ca4565b60405180910390f35b34801561020b57600080fd5b5061022660048036038101906102219190610aec565b610a4e565b6040516102339190610c89565b60405180910390f35b34801561024857600080fd5b50610263600480360381019061025e9190610b3e565b610a6e565b6040516102709190610c45565b60405180910390f35b6000805461028690610e6d565b80601f01602080910402602001604051908101604052809291908181526020018280546102b290610e6d565b80156102ff5780601f106102d4576101008083540402835291602001916102ff565b820191906000526020600020905b8154815290600101906020018083116102e257829003601f168201915b505050505081565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610389576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038090610d01565b60405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156104b0573d6000803e3d6000fd5b5050565b60046020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461055c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055390610ce1565b60405180910390fd5b60005b6003805490508110156106e8576000600382815481106105a8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111156106d357600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b815260040161067f929190610c60565b602060405180830381600087803b15801561069957600080fd5b505af11580156106ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d19190610b15565b505b505080806106e090610e9f565b91505061055f565b50565b60066020528060005260406000206000915054906101000a900460ff1681565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600034116107bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b290610d21565b60405180910390fd5b34600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461080a9190610d78565b92505081905550600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166108c6576003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33346040518363ffffffff1660e01b81526004016109d3929190610c60565b602060405180830381600087803b1580156109ed57600080fd5b505af1158015610a01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a259190610b15565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60056020528060005260406000206000915054906101000a900460ff1681565b60038181548110610a7e57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081359050610abc81610fd2565b92915050565b600081519050610ad181610fe9565b92915050565b600081359050610ae681611000565b92915050565b600060208284031215610afe57600080fd5b6000610b0c84828501610aad565b91505092915050565b600060208284031215610b2757600080fd5b6000610b3584828501610ac2565b91505092915050565b600060208284031215610b5057600080fd5b6000610b5e84828501610ad7565b91505092915050565b610b7081610dce565b82525050565b610b7f81610de0565b82525050565b610b8e81610e16565b82525050565b6000610b9f82610d5c565b610ba98185610d67565b9350610bb9818560208601610e3a565b610bc281610f46565b840191505092915050565b6000610bda601883610d67565b9150610be582610f57565b602082019050919050565b6000610bfd601483610d67565b9150610c0882610f80565b602082019050919050565b6000610c20601a83610d67565b9150610c2b82610fa9565b602082019050919050565b610c3f81610e0c565b82525050565b6000602082019050610c5a6000830184610b67565b92915050565b6000604082019050610c756000830185610b67565b610c826020830184610c36565b9392505050565b6000602082019050610c9e6000830184610b76565b92915050565b6000602082019050610cb96000830184610b85565b92915050565b60006020820190508181036000830152610cd98184610b94565b905092915050565b60006020820190508181036000830152610cfa81610bcd565b9050919050565b60006020820190508181036000830152610d1a81610bf0565b9050919050565b60006020820190508181036000830152610d3a81610c13565b9050919050565b6000602082019050610d566000830184610c36565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610d8382610e0c565b9150610d8e83610e0c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610dc357610dc2610ee8565b5b828201905092915050565b6000610dd982610dec565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610e2182610e28565b9050919050565b6000610e3382610dec565b9050919050565b60005b83811015610e58578082015181840152602081019050610e3d565b83811115610e67576000848401525b50505050565b60006002820490506001821680610e8557607f821691505b60208210811415610e9957610e98610f17565b5b50919050565b6000610eaa82610e0c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610edd57610edc610ee8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f63616c6c6572206d75737420626520746865206f776e65720000000000000000600082015250565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b7f496e76616c696420616d6f756e7420666f72207374616b696e67000000000000600082015250565b610fdb81610dce565b8114610fe657600080fd5b50565b610ff281610de0565b8114610ffd57600080fd5b50565b61100981610e0c565b811461101457600080fd5b5056fea2646970667358221220c105281d9bea758c879646728e0d32a5793a8c800f89749b811ef0896eb02ccb64736f6c63430008020033",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c806381b2d07b1161006457806381b2d07b146101745780638da5cb5b1461019f5780638f4062d7146101ca578063958285a1146101d4578063c93c8f34146101ff578063fd5e6dd11461023c5761009c565b806306fdde03146100a15780630e29df22146100cc57806345bc78ab146100e357806360ab5852146101205780636f49712b14610137575b600080fd5b3480156100ad57600080fd5b506100b6610279565b6040516100c39190610cbf565b60405180910390f35b3480156100d857600080fd5b506100e1610307565b005b3480156100ef57600080fd5b5061010a60048036038101906101059190610aec565b6104b4565b6040516101179190610d41565b60405180910390f35b34801561012c57600080fd5b506101356104cc565b005b34801561014357600080fd5b5061015e60048036038101906101599190610aec565b6106eb565b60405161016b9190610c89565b60405180910390f35b34801561018057600080fd5b5061018961070b565b6040516101969190610d41565b60405180910390f35b3480156101ab57600080fd5b506101b4610752565b6040516101c19190610c45565b60405180910390f35b6101d2610778565b005b3480156101e057600080fd5b506101e9610a28565b6040516101f69190610ca4565b60405180910390f35b34801561020b57600080fd5b5061022660048036038101906102219190610aec565b610a4e565b6040516102339190610c89565b60405180910390f35b34801561024857600080fd5b50610263600480360381019061025e9190610b3e565b610a6e565b6040516102709190610c45565b60405180910390f35b6000805461028690610e6d565b80601f01602080910402602001604051908101604052809291908181526020018280546102b290610e6d565b80156102ff5780601f106102d4576101008083540402835291602001916102ff565b820191906000526020600020905b8154815290600101906020018083116102e257829003601f168201915b505050505081565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610389576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038090610d01565b60405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156104b0573d6000803e3d6000fd5b5050565b60046020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461055c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055390610ce1565b60405180910390fd5b60005b6003805490508110156106e8576000600382815481106105a8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111156106d357600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b815260040161067f929190610c60565b602060405180830381600087803b15801561069957600080fd5b505af11580156106ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d19190610b15565b505b505080806106e090610e9f565b91505061055f565b50565b60066020528060005260406000206000915054906101000a900460ff1681565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600034116107bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b290610d21565b60405180910390fd5b34600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461080a9190610d78565b92505081905550600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166108c6576003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33346040518363ffffffff1660e01b81526004016109d3929190610c60565b602060405180830381600087803b1580156109ed57600080fd5b505af1158015610a01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a259190610b15565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60056020528060005260406000206000915054906101000a900460ff1681565b60038181548110610a7e57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081359050610abc81610fd2565b92915050565b600081519050610ad181610fe9565b92915050565b600081359050610ae681611000565b92915050565b600060208284031215610afe57600080fd5b6000610b0c84828501610aad565b91505092915050565b600060208284031215610b2757600080fd5b6000610b3584828501610ac2565b91505092915050565b600060208284031215610b5057600080fd5b6000610b5e84828501610ad7565b91505092915050565b610b7081610dce565b82525050565b610b7f81610de0565b82525050565b610b8e81610e16565b82525050565b6000610b9f82610d5c565b610ba98185610d67565b9350610bb9818560208601610e3a565b610bc281610f46565b840191505092915050565b6000610bda601883610d67565b9150610be582610f57565b602082019050919050565b6000610bfd601483610d67565b9150610c0882610f80565b602082019050919050565b6000610c20601a83610d67565b9150610c2b82610fa9565b602082019050919050565b610c3f81610e0c565b82525050565b6000602082019050610c5a6000830184610b67565b92915050565b6000604082019050610c756000830185610b67565b610c826020830184610c36565b9392505050565b6000602082019050610c9e6000830184610b76565b92915050565b6000602082019050610cb96000830184610b85565b92915050565b60006020820190508181036000830152610cd98184610b94565b905092915050565b60006020820190508181036000830152610cfa81610bcd565b9050919050565b60006020820190508181036000830152610d1a81610bf0565b9050919050565b60006020820190508181036000830152610d3a81610c13565b9050919050565b6000602082019050610d566000830184610c36565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610d8382610e0c565b9150610d8e83610e0c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610dc357610dc2610ee8565b5b828201905092915050565b6000610dd982610dec565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610e2182610e28565b9050919050565b6000610e3382610dec565b9050919050565b60005b83811015610e58578082015181840152602081019050610e3d565b83811115610e67576000848401525b50505050565b60006002820490506001821680610e8557607f821691505b60208210811415610e9957610e98610f17565b5b50919050565b6000610eaa82610e0c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610edd57610edc610ee8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f63616c6c6572206d75737420626520746865206f776e65720000000000000000600082015250565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b7f496e76616c696420616d6f756e7420666f72207374616b696e67000000000000600082015250565b610fdb81610dce565b8114610fe657600080fd5b50565b610ff281610de0565b8114610ffd57600080fd5b50565b61100981610e0c565b811461101457600080fd5b5056fea2646970667358221220c105281d9bea758c879646728e0d32a5793a8c800f89749b811ef0896eb02ccb64736f6c63430008020033",
  "immutableReferences": {},
  "generatedSources": [
    {
      "ast": {
        "nodeType": "YulBlock",
        "src": "0:1538:10",
        "statements": [
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "87:97:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "97:22:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "offset",
                        "nodeType": "YulIdentifier",
                        "src": "112:6:10"
                      }
                    ],
                    "functionName": {
                      "name": "mload",
                      "nodeType": "YulIdentifier",
                      "src": "106:5:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "106:13:10"
                  },
                  "variableNames": [
                    {
                      "name": "value",
                      "nodeType": "YulIdentifier",
                      "src": "97:5:10"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "172:5:10"
                      }
                    ],
                    "functionName": {
                      "name": "validator_revert_t_contract$_AceToken_$1016",
                      "nodeType": "YulIdentifier",
                      "src": "128:43:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "128:50:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "128:50:10"
                }
              ]
            },
            "name": "abi_decode_t_contract$_AceToken_$1016_fromMemory",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "65:6:10",
                "type": ""
              },
              {
                "name": "end",
                "nodeType": "YulTypedName",
                "src": "73:3:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "81:5:10",
                "type": ""
              }
            ],
            "src": "7:177:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "284:224:10",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "330:16:10",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "339:1:10",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "342:1:10",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "332:6:10"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "332:12:10"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "332:12:10"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "305:7:10"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "314:9:10"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "301:3:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "301:23:10"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "326:2:10",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "297:3:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "297:32:10"
                  },
                  "nodeType": "YulIf",
                  "src": "294:2:10"
                },
                {
                  "nodeType": "YulBlock",
                  "src": "356:145:10",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "371:15:10",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "385:1:10",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "375:6:10",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "400:91:10",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "463:9:10"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "474:6:10"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "459:3:10"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "459:22:10"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "483:7:10"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_t_contract$_AceToken_$1016_fromMemory",
                          "nodeType": "YulIdentifier",
                          "src": "410:48:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "410:81:10"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "400:6:10"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_contract$_AceToken_$1016_fromMemory",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "254:9:10",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "265:7:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "277:6:10",
                "type": ""
              }
            ],
            "src": "190:318:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "559:51:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "569:35:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "598:5:10"
                      }
                    ],
                    "functionName": {
                      "name": "cleanup_t_uint160",
                      "nodeType": "YulIdentifier",
                      "src": "580:17:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "580:24:10"
                  },
                  "variableNames": [
                    {
                      "name": "cleaned",
                      "nodeType": "YulIdentifier",
                      "src": "569:7:10"
                    }
                  ]
                }
              ]
            },
            "name": "cleanup_t_address",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "541:5:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "cleaned",
                "nodeType": "YulTypedName",
                "src": "551:7:10",
                "type": ""
              }
            ],
            "src": "514:96:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "678:51:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "688:35:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "717:5:10"
                      }
                    ],
                    "functionName": {
                      "name": "cleanup_t_address",
                      "nodeType": "YulIdentifier",
                      "src": "699:17:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "699:24:10"
                  },
                  "variableNames": [
                    {
                      "name": "cleaned",
                      "nodeType": "YulIdentifier",
                      "src": "688:7:10"
                    }
                  ]
                }
              ]
            },
            "name": "cleanup_t_contract$_AceToken_$1016",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "660:5:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "cleaned",
                "nodeType": "YulTypedName",
                "src": "670:7:10",
                "type": ""
              }
            ],
            "src": "616:113:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "780:81:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "790:65:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "805:5:10"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "812:42:10",
                        "type": "",
                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                      }
                    ],
                    "functionName": {
                      "name": "and",
                      "nodeType": "YulIdentifier",
                      "src": "801:3:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "801:54:10"
                  },
                  "variableNames": [
                    {
                      "name": "cleaned",
                      "nodeType": "YulIdentifier",
                      "src": "790:7:10"
                    }
                  ]
                }
              ]
            },
            "name": "cleanup_t_uint160",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "762:5:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "cleaned",
                "nodeType": "YulTypedName",
                "src": "772:7:10",
                "type": ""
              }
            ],
            "src": "735:126:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "918:269:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "928:22:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "data",
                        "nodeType": "YulIdentifier",
                        "src": "942:4:10"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "948:1:10",
                        "type": "",
                        "value": "2"
                      }
                    ],
                    "functionName": {
                      "name": "div",
                      "nodeType": "YulIdentifier",
                      "src": "938:3:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "938:12:10"
                  },
                  "variableNames": [
                    {
                      "name": "length",
                      "nodeType": "YulIdentifier",
                      "src": "928:6:10"
                    }
                  ]
                },
                {
                  "nodeType": "YulVariableDeclaration",
                  "src": "959:38:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "data",
                        "nodeType": "YulIdentifier",
                        "src": "989:4:10"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "995:1:10",
                        "type": "",
                        "value": "1"
                      }
                    ],
                    "functionName": {
                      "name": "and",
                      "nodeType": "YulIdentifier",
                      "src": "985:3:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "985:12:10"
                  },
                  "variables": [
                    {
                      "name": "outOfPlaceEncoding",
                      "nodeType": "YulTypedName",
                      "src": "963:18:10",
                      "type": ""
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "1036:51:10",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "1050:27:10",
                        "value": {
                          "arguments": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "1064:6:10"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1072:4:10",
                              "type": "",
                              "value": "0x7f"
                            }
                          ],
                          "functionName": {
                            "name": "and",
                            "nodeType": "YulIdentifier",
                            "src": "1060:3:10"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "1060:17:10"
                        },
                        "variableNames": [
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "1050:6:10"
                          }
                        ]
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "name": "outOfPlaceEncoding",
                        "nodeType": "YulIdentifier",
                        "src": "1016:18:10"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "1009:6:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1009:26:10"
                  },
                  "nodeType": "YulIf",
                  "src": "1006:2:10"
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "1139:42:10",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "functionName": {
                            "name": "panic_error_0x22",
                            "nodeType": "YulIdentifier",
                            "src": "1153:16:10"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "1153:18:10"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "1153:18:10"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "name": "outOfPlaceEncoding",
                        "nodeType": "YulIdentifier",
                        "src": "1103:18:10"
                      },
                      {
                        "arguments": [
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "1126:6:10"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1134:2:10",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "1123:2:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1123:14:10"
                      }
                    ],
                    "functionName": {
                      "name": "eq",
                      "nodeType": "YulIdentifier",
                      "src": "1100:2:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1100:38:10"
                  },
                  "nodeType": "YulIf",
                  "src": "1097:2:10"
                }
              ]
            },
            "name": "extract_byte_array_length",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "data",
                "nodeType": "YulTypedName",
                "src": "902:4:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "length",
                "nodeType": "YulTypedName",
                "src": "911:6:10",
                "type": ""
              }
            ],
            "src": "867:320:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1221:152:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1238:1:10",
                        "type": "",
                        "value": "0"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1241:77:10",
                        "type": "",
                        "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "1231:6:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1231:88:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "1231:88:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1335:1:10",
                        "type": "",
                        "value": "4"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1338:4:10",
                        "type": "",
                        "value": "0x22"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "1328:6:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1328:15:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "1328:15:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1359:1:10",
                        "type": "",
                        "value": "0"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1362:4:10",
                        "type": "",
                        "value": "0x24"
                      }
                    ],
                    "functionName": {
                      "name": "revert",
                      "nodeType": "YulIdentifier",
                      "src": "1352:6:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1352:15:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "1352:15:10"
                }
              ]
            },
            "name": "panic_error_0x22",
            "nodeType": "YulFunctionDefinition",
            "src": "1193:180:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1439:96:10",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "1513:16:10",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1522:1:10",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1525:1:10",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "1515:6:10"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "1515:12:10"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "1515:12:10"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1462:5:10"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1504:5:10"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_contract$_AceToken_$1016",
                              "nodeType": "YulIdentifier",
                              "src": "1469:34:10"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1469:41:10"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "1459:2:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1459:52:10"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "1452:6:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1452:60:10"
                  },
                  "nodeType": "YulIf",
                  "src": "1449:2:10"
                }
              ]
            },
            "name": "validator_revert_t_contract$_AceToken_$1016",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "1432:5:10",
                "type": ""
              }
            ],
            "src": "1379:156:10"
          }
        ]
      },
      "contents": "{\n\n    function abi_decode_t_contract$_AceToken_$1016_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_contract$_AceToken_$1016(value)\n    }\n\n    function abi_decode_tuple_t_contract$_AceToken_$1016_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_contract$_AceToken_$1016_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_contract$_AceToken_$1016(value) -> cleaned {\n        cleaned := cleanup_t_address(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function validator_revert_t_contract$_AceToken_$1016(value) {\n        if iszero(eq(value, cleanup_t_contract$_AceToken_$1016(value))) { revert(0, 0) }\n    }\n\n}\n",
      "id": 10,
      "language": "Yul",
      "name": "#utility.yul"
    }
  ],
  "deployedGeneratedSources": [
    {
      "ast": {
        "nodeType": "YulBlock",
        "src": "0:9723:10",
        "statements": [
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "59:87:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "69:29:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "offset",
                        "nodeType": "YulIdentifier",
                        "src": "91:6:10"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "78:12:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "78:20:10"
                  },
                  "variableNames": [
                    {
                      "name": "value",
                      "nodeType": "YulIdentifier",
                      "src": "69:5:10"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "134:5:10"
                      }
                    ],
                    "functionName": {
                      "name": "validator_revert_t_address",
                      "nodeType": "YulIdentifier",
                      "src": "107:26:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "107:33:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "107:33:10"
                }
              ]
            },
            "name": "abi_decode_t_address",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "37:6:10",
                "type": ""
              },
              {
                "name": "end",
                "nodeType": "YulTypedName",
                "src": "45:3:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "53:5:10",
                "type": ""
              }
            ],
            "src": "7:139:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "212:77:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "222:22:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "offset",
                        "nodeType": "YulIdentifier",
                        "src": "237:6:10"
                      }
                    ],
                    "functionName": {
                      "name": "mload",
                      "nodeType": "YulIdentifier",
                      "src": "231:5:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "231:13:10"
                  },
                  "variableNames": [
                    {
                      "name": "value",
                      "nodeType": "YulIdentifier",
                      "src": "222:5:10"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "277:5:10"
                      }
                    ],
                    "functionName": {
                      "name": "validator_revert_t_bool",
                      "nodeType": "YulIdentifier",
                      "src": "253:23:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "253:30:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "253:30:10"
                }
              ]
            },
            "name": "abi_decode_t_bool_fromMemory",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "190:6:10",
                "type": ""
              },
              {
                "name": "end",
                "nodeType": "YulTypedName",
                "src": "198:3:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "206:5:10",
                "type": ""
              }
            ],
            "src": "152:137:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "347:87:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "357:29:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "offset",
                        "nodeType": "YulIdentifier",
                        "src": "379:6:10"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "366:12:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "366:20:10"
                  },
                  "variableNames": [
                    {
                      "name": "value",
                      "nodeType": "YulIdentifier",
                      "src": "357:5:10"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "422:5:10"
                      }
                    ],
                    "functionName": {
                      "name": "validator_revert_t_uint256",
                      "nodeType": "YulIdentifier",
                      "src": "395:26:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "395:33:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "395:33:10"
                }
              ]
            },
            "name": "abi_decode_t_uint256",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "325:6:10",
                "type": ""
              },
              {
                "name": "end",
                "nodeType": "YulTypedName",
                "src": "333:3:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "341:5:10",
                "type": ""
              }
            ],
            "src": "295:139:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "506:196:10",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "552:16:10",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "561:1:10",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "564:1:10",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "554:6:10"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "554:12:10"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "554:12:10"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "527:7:10"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "536:9:10"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "523:3:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "523:23:10"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "548:2:10",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "519:3:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "519:32:10"
                  },
                  "nodeType": "YulIf",
                  "src": "516:2:10"
                },
                {
                  "nodeType": "YulBlock",
                  "src": "578:117:10",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "593:15:10",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "607:1:10",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "597:6:10",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "622:63:10",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "657:9:10"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "668:6:10"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "653:3:10"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "653:22:10"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "677:7:10"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_t_address",
                          "nodeType": "YulIdentifier",
                          "src": "632:20:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "632:53:10"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "622:6:10"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_address",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "476:9:10",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "487:7:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "499:6:10",
                "type": ""
              }
            ],
            "src": "440:262:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "782:204:10",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "828:16:10",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "837:1:10",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "840:1:10",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "830:6:10"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "830:12:10"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "830:12:10"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "803:7:10"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "812:9:10"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "799:3:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "799:23:10"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "824:2:10",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "795:3:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "795:32:10"
                  },
                  "nodeType": "YulIf",
                  "src": "792:2:10"
                },
                {
                  "nodeType": "YulBlock",
                  "src": "854:125:10",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "869:15:10",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "883:1:10",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "873:6:10",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "898:71:10",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "941:9:10"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "952:6:10"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "937:3:10"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "937:22:10"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "961:7:10"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_t_bool_fromMemory",
                          "nodeType": "YulIdentifier",
                          "src": "908:28:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "908:61:10"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "898:6:10"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_bool_fromMemory",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "752:9:10",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "763:7:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "775:6:10",
                "type": ""
              }
            ],
            "src": "708:278:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1058:196:10",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "1104:16:10",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1113:1:10",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1116:1:10",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "1106:6:10"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "1106:12:10"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "1106:12:10"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "1079:7:10"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1088:9:10"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "1075:3:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1075:23:10"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1100:2:10",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "1071:3:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1071:32:10"
                  },
                  "nodeType": "YulIf",
                  "src": "1068:2:10"
                },
                {
                  "nodeType": "YulBlock",
                  "src": "1130:117:10",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1145:15:10",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1159:1:10",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "1149:6:10",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1174:63:10",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1209:9:10"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1220:6:10"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1205:3:10"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1205:22:10"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "1229:7:10"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_t_uint256",
                          "nodeType": "YulIdentifier",
                          "src": "1184:20:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1184:53:10"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "1174:6:10"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_uint256",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "1028:9:10",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "1039:7:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "1051:6:10",
                "type": ""
              }
            ],
            "src": "992:262:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1325:53:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "1342:3:10"
                      },
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1365:5:10"
                          }
                        ],
                        "functionName": {
                          "name": "cleanup_t_address",
                          "nodeType": "YulIdentifier",
                          "src": "1347:17:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1347:24:10"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "1335:6:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1335:37:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "1335:37:10"
                }
              ]
            },
            "name": "abi_encode_t_address_to_t_address_fromStack",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "1313:5:10",
                "type": ""
              },
              {
                "name": "pos",
                "nodeType": "YulTypedName",
                "src": "1320:3:10",
                "type": ""
              }
            ],
            "src": "1260:118:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1443:50:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "1460:3:10"
                      },
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1480:5:10"
                          }
                        ],
                        "functionName": {
                          "name": "cleanup_t_bool",
                          "nodeType": "YulIdentifier",
                          "src": "1465:14:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1465:21:10"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "1453:6:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1453:34:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "1453:34:10"
                }
              ]
            },
            "name": "abi_encode_t_bool_to_t_bool_fromStack",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "1431:5:10",
                "type": ""
              },
              {
                "name": "pos",
                "nodeType": "YulTypedName",
                "src": "1438:3:10",
                "type": ""
              }
            ],
            "src": "1384:109:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1581:83:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "1598:3:10"
                      },
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1651:5:10"
                          }
                        ],
                        "functionName": {
                          "name": "convert_t_contract$_AceToken_$1016_to_t_address",
                          "nodeType": "YulIdentifier",
                          "src": "1603:47:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1603:54:10"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "1591:6:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1591:67:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "1591:67:10"
                }
              ]
            },
            "name": "abi_encode_t_contract$_AceToken_$1016_to_t_address_fromStack",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "1569:5:10",
                "type": ""
              },
              {
                "name": "pos",
                "nodeType": "YulTypedName",
                "src": "1576:3:10",
                "type": ""
              }
            ],
            "src": "1499:165:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1762:272:10",
              "statements": [
                {
                  "nodeType": "YulVariableDeclaration",
                  "src": "1772:53:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "1819:5:10"
                      }
                    ],
                    "functionName": {
                      "name": "array_length_t_string_memory_ptr",
                      "nodeType": "YulIdentifier",
                      "src": "1786:32:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1786:39:10"
                  },
                  "variables": [
                    {
                      "name": "length",
                      "nodeType": "YulTypedName",
                      "src": "1776:6:10",
                      "type": ""
                    }
                  ]
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "1834:78:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "1900:3:10"
                      },
                      {
                        "name": "length",
                        "nodeType": "YulIdentifier",
                        "src": "1905:6:10"
                      }
                    ],
                    "functionName": {
                      "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                      "nodeType": "YulIdentifier",
                      "src": "1841:58:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1841:71:10"
                  },
                  "variableNames": [
                    {
                      "name": "pos",
                      "nodeType": "YulIdentifier",
                      "src": "1834:3:10"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1947:5:10"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1954:4:10",
                            "type": "",
                            "value": "0x20"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1943:3:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1943:16:10"
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "1961:3:10"
                      },
                      {
                        "name": "length",
                        "nodeType": "YulIdentifier",
                        "src": "1966:6:10"
                      }
                    ],
                    "functionName": {
                      "name": "copy_memory_to_memory",
                      "nodeType": "YulIdentifier",
                      "src": "1921:21:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1921:52:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "1921:52:10"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "1982:46:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "1993:3:10"
                      },
                      {
                        "arguments": [
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "2020:6:10"
                          }
                        ],
                        "functionName": {
                          "name": "round_up_to_mul_of_32",
                          "nodeType": "YulIdentifier",
                          "src": "1998:21:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1998:29:10"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "1989:3:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1989:39:10"
                  },
                  "variableNames": [
                    {
                      "name": "end",
                      "nodeType": "YulIdentifier",
                      "src": "1982:3:10"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "1743:5:10",
                "type": ""
              },
              {
                "name": "pos",
                "nodeType": "YulTypedName",
                "src": "1750:3:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "end",
                "nodeType": "YulTypedName",
                "src": "1758:3:10",
                "type": ""
              }
            ],
            "src": "1670:364:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "2186:220:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "2196:74:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "2262:3:10"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2267:2:10",
                        "type": "",
                        "value": "24"
                      }
                    ],
                    "functionName": {
                      "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                      "nodeType": "YulIdentifier",
                      "src": "2203:58:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2203:67:10"
                  },
                  "variableNames": [
                    {
                      "name": "pos",
                      "nodeType": "YulIdentifier",
                      "src": "2196:3:10"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "2368:3:10"
                      }
                    ],
                    "functionName": {
                      "name": "store_literal_in_memory_3bfff96132c9b3295fc212b6fbfc1c5174f6f9be7b52a9aff62731c1d8706a0b",
                      "nodeType": "YulIdentifier",
                      "src": "2279:88:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2279:93:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "2279:93:10"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "2381:19:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "2392:3:10"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2397:2:10",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "2388:3:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2388:12:10"
                  },
                  "variableNames": [
                    {
                      "name": "end",
                      "nodeType": "YulIdentifier",
                      "src": "2381:3:10"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_t_stringliteral_3bfff96132c9b3295fc212b6fbfc1c5174f6f9be7b52a9aff62731c1d8706a0b_to_t_string_memory_ptr_fromStack",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "pos",
                "nodeType": "YulTypedName",
                "src": "2174:3:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "end",
                "nodeType": "YulTypedName",
                "src": "2182:3:10",
                "type": ""
              }
            ],
            "src": "2040:366:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "2558:220:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "2568:74:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "2634:3:10"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2639:2:10",
                        "type": "",
                        "value": "20"
                      }
                    ],
                    "functionName": {
                      "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                      "nodeType": "YulIdentifier",
                      "src": "2575:58:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2575:67:10"
                  },
                  "variableNames": [
                    {
                      "name": "pos",
                      "nodeType": "YulIdentifier",
                      "src": "2568:3:10"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "2740:3:10"
                      }
                    ],
                    "functionName": {
                      "name": "store_literal_in_memory_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                      "nodeType": "YulIdentifier",
                      "src": "2651:88:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2651:93:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "2651:93:10"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "2753:19:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "2764:3:10"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2769:2:10",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "2760:3:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2760:12:10"
                  },
                  "variableNames": [
                    {
                      "name": "end",
                      "nodeType": "YulIdentifier",
                      "src": "2753:3:10"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5_to_t_string_memory_ptr_fromStack",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "pos",
                "nodeType": "YulTypedName",
                "src": "2546:3:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "end",
                "nodeType": "YulTypedName",
                "src": "2554:3:10",
                "type": ""
              }
            ],
            "src": "2412:366:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "2930:220:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "2940:74:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "3006:3:10"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "3011:2:10",
                        "type": "",
                        "value": "26"
                      }
                    ],
                    "functionName": {
                      "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                      "nodeType": "YulIdentifier",
                      "src": "2947:58:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2947:67:10"
                  },
                  "variableNames": [
                    {
                      "name": "pos",
                      "nodeType": "YulIdentifier",
                      "src": "2940:3:10"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "3112:3:10"
                      }
                    ],
                    "functionName": {
                      "name": "store_literal_in_memory_b257b1e934d701b679ee811a2b762f8468ef7697dcca50c5076538ec8bfc9e26",
                      "nodeType": "YulIdentifier",
                      "src": "3023:88:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3023:93:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "3023:93:10"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "3125:19:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "3136:3:10"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "3141:2:10",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "3132:3:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3132:12:10"
                  },
                  "variableNames": [
                    {
                      "name": "end",
                      "nodeType": "YulIdentifier",
                      "src": "3125:3:10"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_t_stringliteral_b257b1e934d701b679ee811a2b762f8468ef7697dcca50c5076538ec8bfc9e26_to_t_string_memory_ptr_fromStack",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "pos",
                "nodeType": "YulTypedName",
                "src": "2918:3:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "end",
                "nodeType": "YulTypedName",
                "src": "2926:3:10",
                "type": ""
              }
            ],
            "src": "2784:366:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "3221:53:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "3238:3:10"
                      },
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "3261:5:10"
                          }
                        ],
                        "functionName": {
                          "name": "cleanup_t_uint256",
                          "nodeType": "YulIdentifier",
                          "src": "3243:17:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3243:24:10"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "3231:6:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3231:37:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "3231:37:10"
                }
              ]
            },
            "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "3209:5:10",
                "type": ""
              },
              {
                "name": "pos",
                "nodeType": "YulTypedName",
                "src": "3216:3:10",
                "type": ""
              }
            ],
            "src": "3156:118:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "3378:124:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "3388:26:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "3400:9:10"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "3411:2:10",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "3396:3:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3396:18:10"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "3388:4:10"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "value0",
                        "nodeType": "YulIdentifier",
                        "src": "3468:6:10"
                      },
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3481:9:10"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3492:1:10",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3477:3:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3477:17:10"
                      }
                    ],
                    "functionName": {
                      "name": "abi_encode_t_address_to_t_address_fromStack",
                      "nodeType": "YulIdentifier",
                      "src": "3424:43:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3424:71:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "3424:71:10"
                }
              ]
            },
            "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "3350:9:10",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "3362:6:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "3373:4:10",
                "type": ""
              }
            ],
            "src": "3280:222:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "3634:206:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "3644:26:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "3656:9:10"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "3667:2:10",
                        "type": "",
                        "value": "64"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "3652:3:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3652:18:10"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "3644:4:10"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "value0",
                        "nodeType": "YulIdentifier",
                        "src": "3724:6:10"
                      },
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3737:9:10"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3748:1:10",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3733:3:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3733:17:10"
                      }
                    ],
                    "functionName": {
                      "name": "abi_encode_t_address_to_t_address_fromStack",
                      "nodeType": "YulIdentifier",
                      "src": "3680:43:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3680:71:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "3680:71:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "value1",
                        "nodeType": "YulIdentifier",
                        "src": "3805:6:10"
                      },
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3818:9:10"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3829:2:10",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3814:3:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3814:18:10"
                      }
                    ],
                    "functionName": {
                      "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                      "nodeType": "YulIdentifier",
                      "src": "3761:43:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3761:72:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "3761:72:10"
                }
              ]
            },
            "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "3598:9:10",
                "type": ""
              },
              {
                "name": "value1",
                "nodeType": "YulTypedName",
                "src": "3610:6:10",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "3618:6:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "3629:4:10",
                "type": ""
              }
            ],
            "src": "3508:332:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "3938:118:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "3948:26:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "3960:9:10"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "3971:2:10",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "3956:3:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3956:18:10"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "3948:4:10"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "value0",
                        "nodeType": "YulIdentifier",
                        "src": "4022:6:10"
                      },
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4035:9:10"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4046:1:10",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4031:3:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4031:17:10"
                      }
                    ],
                    "functionName": {
                      "name": "abi_encode_t_bool_to_t_bool_fromStack",
                      "nodeType": "YulIdentifier",
                      "src": "3984:37:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3984:65:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "3984:65:10"
                }
              ]
            },
            "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "3910:9:10",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "3922:6:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "3933:4:10",
                "type": ""
              }
            ],
            "src": "3846:210:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "4177:141:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "4187:26:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "4199:9:10"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "4210:2:10",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "4195:3:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4195:18:10"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "4187:4:10"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "value0",
                        "nodeType": "YulIdentifier",
                        "src": "4284:6:10"
                      },
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4297:9:10"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4308:1:10",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4293:3:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4293:17:10"
                      }
                    ],
                    "functionName": {
                      "name": "abi_encode_t_contract$_AceToken_$1016_to_t_address_fromStack",
                      "nodeType": "YulIdentifier",
                      "src": "4223:60:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4223:88:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "4223:88:10"
                }
              ]
            },
            "name": "abi_encode_tuple_t_contract$_AceToken_$1016__to_t_address__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "4149:9:10",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "4161:6:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "4172:4:10",
                "type": ""
              }
            ],
            "src": "4062:256:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "4442:195:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "4452:26:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "4464:9:10"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "4475:2:10",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "4460:3:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4460:18:10"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "4452:4:10"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4499:9:10"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4510:1:10",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4495:3:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4495:17:10"
                      },
                      {
                        "arguments": [
                          {
                            "name": "tail",
                            "nodeType": "YulIdentifier",
                            "src": "4518:4:10"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4524:9:10"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "4514:3:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4514:20:10"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "4488:6:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4488:47:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "4488:47:10"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "4544:86:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "value0",
                        "nodeType": "YulIdentifier",
                        "src": "4616:6:10"
                      },
                      {
                        "name": "tail",
                        "nodeType": "YulIdentifier",
                        "src": "4625:4:10"
                      }
                    ],
                    "functionName": {
                      "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
                      "nodeType": "YulIdentifier",
                      "src": "4552:63:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4552:78:10"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "4544:4:10"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "4414:9:10",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "4426:6:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "4437:4:10",
                "type": ""
              }
            ],
            "src": "4324:313:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "4814:248:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "4824:26:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "4836:9:10"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "4847:2:10",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "4832:3:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4832:18:10"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "4824:4:10"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4871:9:10"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4882:1:10",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4867:3:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4867:17:10"
                      },
                      {
                        "arguments": [
                          {
                            "name": "tail",
                            "nodeType": "YulIdentifier",
                            "src": "4890:4:10"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4896:9:10"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "4886:3:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4886:20:10"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "4860:6:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4860:47:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "4860:47:10"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "4916:139:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "tail",
                        "nodeType": "YulIdentifier",
                        "src": "5050:4:10"
                      }
                    ],
                    "functionName": {
                      "name": "abi_encode_t_stringliteral_3bfff96132c9b3295fc212b6fbfc1c5174f6f9be7b52a9aff62731c1d8706a0b_to_t_string_memory_ptr_fromStack",
                      "nodeType": "YulIdentifier",
                      "src": "4924:124:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4924:131:10"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "4916:4:10"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_3bfff96132c9b3295fc212b6fbfc1c5174f6f9be7b52a9aff62731c1d8706a0b__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "4794:9:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "4809:4:10",
                "type": ""
              }
            ],
            "src": "4643:419:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "5239:248:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "5249:26:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "5261:9:10"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "5272:2:10",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "5257:3:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "5257:18:10"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "5249:4:10"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5296:9:10"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5307:1:10",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5292:3:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5292:17:10"
                      },
                      {
                        "arguments": [
                          {
                            "name": "tail",
                            "nodeType": "YulIdentifier",
                            "src": "5315:4:10"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5321:9:10"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "5311:3:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5311:20:10"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "5285:6:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "5285:47:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "5285:47:10"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "5341:139:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "tail",
                        "nodeType": "YulIdentifier",
                        "src": "5475:4:10"
                      }
                    ],
                    "functionName": {
                      "name": "abi_encode_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5_to_t_string_memory_ptr_fromStack",
                      "nodeType": "YulIdentifier",
                      "src": "5349:124:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "5349:131:10"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "5341:4:10"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "5219:9:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "5234:4:10",
                "type": ""
              }
            ],
            "src": "5068:419:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "5664:248:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "5674:26:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "5686:9:10"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "5697:2:10",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "5682:3:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "5682:18:10"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "5674:4:10"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5721:9:10"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5732:1:10",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5717:3:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5717:17:10"
                      },
                      {
                        "arguments": [
                          {
                            "name": "tail",
                            "nodeType": "YulIdentifier",
                            "src": "5740:4:10"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5746:9:10"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "5736:3:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5736:20:10"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "5710:6:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "5710:47:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "5710:47:10"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "5766:139:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "tail",
                        "nodeType": "YulIdentifier",
                        "src": "5900:4:10"
                      }
                    ],
                    "functionName": {
                      "name": "abi_encode_t_stringliteral_b257b1e934d701b679ee811a2b762f8468ef7697dcca50c5076538ec8bfc9e26_to_t_string_memory_ptr_fromStack",
                      "nodeType": "YulIdentifier",
                      "src": "5774:124:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "5774:131:10"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "5766:4:10"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_b257b1e934d701b679ee811a2b762f8468ef7697dcca50c5076538ec8bfc9e26__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "5644:9:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "5659:4:10",
                "type": ""
              }
            ],
            "src": "5493:419:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "6016:124:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "6026:26:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "6038:9:10"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "6049:2:10",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "6034:3:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "6034:18:10"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "6026:4:10"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "value0",
                        "nodeType": "YulIdentifier",
                        "src": "6106:6:10"
                      },
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6119:9:10"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6130:1:10",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "6115:3:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6115:17:10"
                      }
                    ],
                    "functionName": {
                      "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                      "nodeType": "YulIdentifier",
                      "src": "6062:43:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "6062:71:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "6062:71:10"
                }
              ]
            },
            "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "5988:9:10",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "6000:6:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "6011:4:10",
                "type": ""
              }
            ],
            "src": "5918:222:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "6205:40:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "6216:22:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "6232:5:10"
                      }
                    ],
                    "functionName": {
                      "name": "mload",
                      "nodeType": "YulIdentifier",
                      "src": "6226:5:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "6226:12:10"
                  },
                  "variableNames": [
                    {
                      "name": "length",
                      "nodeType": "YulIdentifier",
                      "src": "6216:6:10"
                    }
                  ]
                }
              ]
            },
            "name": "array_length_t_string_memory_ptr",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "6188:5:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "length",
                "nodeType": "YulTypedName",
                "src": "6198:6:10",
                "type": ""
              }
            ],
            "src": "6146:99:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "6347:73:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "6364:3:10"
                      },
                      {
                        "name": "length",
                        "nodeType": "YulIdentifier",
                        "src": "6369:6:10"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "6357:6:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "6357:19:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "6357:19:10"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "6385:29:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "6404:3:10"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "6409:4:10",
                        "type": "",
                        "value": "0x20"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "6400:3:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "6400:14:10"
                  },
                  "variableNames": [
                    {
                      "name": "updated_pos",
                      "nodeType": "YulIdentifier",
                      "src": "6385:11:10"
                    }
                  ]
                }
              ]
            },
            "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "pos",
                "nodeType": "YulTypedName",
                "src": "6319:3:10",
                "type": ""
              },
              {
                "name": "length",
                "nodeType": "YulTypedName",
                "src": "6324:6:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "updated_pos",
                "nodeType": "YulTypedName",
                "src": "6335:11:10",
                "type": ""
              }
            ],
            "src": "6251:169:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "6470:261:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "6480:25:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "x",
                        "nodeType": "YulIdentifier",
                        "src": "6503:1:10"
                      }
                    ],
                    "functionName": {
                      "name": "cleanup_t_uint256",
                      "nodeType": "YulIdentifier",
                      "src": "6485:17:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "6485:20:10"
                  },
                  "variableNames": [
                    {
                      "name": "x",
                      "nodeType": "YulIdentifier",
                      "src": "6480:1:10"
                    }
                  ]
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "6514:25:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "y",
                        "nodeType": "YulIdentifier",
                        "src": "6537:1:10"
                      }
                    ],
                    "functionName": {
                      "name": "cleanup_t_uint256",
                      "nodeType": "YulIdentifier",
                      "src": "6519:17:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "6519:20:10"
                  },
                  "variableNames": [
                    {
                      "name": "y",
                      "nodeType": "YulIdentifier",
                      "src": "6514:1:10"
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "6677:22:10",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "functionName": {
                            "name": "panic_error_0x11",
                            "nodeType": "YulIdentifier",
                            "src": "6679:16:10"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "6679:18:10"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "6679:18:10"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "name": "x",
                        "nodeType": "YulIdentifier",
                        "src": "6598:1:10"
                      },
                      {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6605:66:10",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "6673:1:10"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "6601:3:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6601:74:10"
                      }
                    ],
                    "functionName": {
                      "name": "gt",
                      "nodeType": "YulIdentifier",
                      "src": "6595:2:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "6595:81:10"
                  },
                  "nodeType": "YulIf",
                  "src": "6592:2:10"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "6709:16:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "x",
                        "nodeType": "YulIdentifier",
                        "src": "6720:1:10"
                      },
                      {
                        "name": "y",
                        "nodeType": "YulIdentifier",
                        "src": "6723:1:10"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "6716:3:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "6716:9:10"
                  },
                  "variableNames": [
                    {
                      "name": "sum",
                      "nodeType": "YulIdentifier",
                      "src": "6709:3:10"
                    }
                  ]
                }
              ]
            },
            "name": "checked_add_t_uint256",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "x",
                "nodeType": "YulTypedName",
                "src": "6457:1:10",
                "type": ""
              },
              {
                "name": "y",
                "nodeType": "YulTypedName",
                "src": "6460:1:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "sum",
                "nodeType": "YulTypedName",
                "src": "6466:3:10",
                "type": ""
              }
            ],
            "src": "6426:305:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "6782:51:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "6792:35:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "6821:5:10"
                      }
                    ],
                    "functionName": {
                      "name": "cleanup_t_uint160",
                      "nodeType": "YulIdentifier",
                      "src": "6803:17:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "6803:24:10"
                  },
                  "variableNames": [
                    {
                      "name": "cleaned",
                      "nodeType": "YulIdentifier",
                      "src": "6792:7:10"
                    }
                  ]
                }
              ]
            },
            "name": "cleanup_t_address",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "6764:5:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "cleaned",
                "nodeType": "YulTypedName",
                "src": "6774:7:10",
                "type": ""
              }
            ],
            "src": "6737:96:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "6881:48:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "6891:32:10",
                  "value": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "6916:5:10"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "6909:6:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6909:13:10"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "6902:6:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "6902:21:10"
                  },
                  "variableNames": [
                    {
                      "name": "cleaned",
                      "nodeType": "YulIdentifier",
                      "src": "6891:7:10"
                    }
                  ]
                }
              ]
            },
            "name": "cleanup_t_bool",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "6863:5:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "cleaned",
                "nodeType": "YulTypedName",
                "src": "6873:7:10",
                "type": ""
              }
            ],
            "src": "6839:90:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "6980:81:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "6990:65:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "7005:5:10"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "7012:42:10",
                        "type": "",
                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                      }
                    ],
                    "functionName": {
                      "name": "and",
                      "nodeType": "YulIdentifier",
                      "src": "7001:3:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "7001:54:10"
                  },
                  "variableNames": [
                    {
                      "name": "cleaned",
                      "nodeType": "YulIdentifier",
                      "src": "6990:7:10"
                    }
                  ]
                }
              ]
            },
            "name": "cleanup_t_uint160",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "6962:5:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "cleaned",
                "nodeType": "YulTypedName",
                "src": "6972:7:10",
                "type": ""
              }
            ],
            "src": "6935:126:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "7112:32:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "7122:16:10",
                  "value": {
                    "name": "value",
                    "nodeType": "YulIdentifier",
                    "src": "7133:5:10"
                  },
                  "variableNames": [
                    {
                      "name": "cleaned",
                      "nodeType": "YulIdentifier",
                      "src": "7122:7:10"
                    }
                  ]
                }
              ]
            },
            "name": "cleanup_t_uint256",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "7094:5:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "cleaned",
                "nodeType": "YulTypedName",
                "src": "7104:7:10",
                "type": ""
              }
            ],
            "src": "7067:77:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "7227:83:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "7237:67:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "7298:5:10"
                      }
                    ],
                    "functionName": {
                      "name": "convert_t_contract$_AceToken_$1016_to_t_uint160",
                      "nodeType": "YulIdentifier",
                      "src": "7250:47:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "7250:54:10"
                  },
                  "variableNames": [
                    {
                      "name": "converted",
                      "nodeType": "YulIdentifier",
                      "src": "7237:9:10"
                    }
                  ]
                }
              ]
            },
            "name": "convert_t_contract$_AceToken_$1016_to_t_address",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "7207:5:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "converted",
                "nodeType": "YulTypedName",
                "src": "7217:9:10",
                "type": ""
              }
            ],
            "src": "7150:160:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "7393:53:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "7403:37:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "7434:5:10"
                      }
                    ],
                    "functionName": {
                      "name": "cleanup_t_uint160",
                      "nodeType": "YulIdentifier",
                      "src": "7416:17:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "7416:24:10"
                  },
                  "variableNames": [
                    {
                      "name": "converted",
                      "nodeType": "YulIdentifier",
                      "src": "7403:9:10"
                    }
                  ]
                }
              ]
            },
            "name": "convert_t_contract$_AceToken_$1016_to_t_uint160",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "7373:5:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "converted",
                "nodeType": "YulTypedName",
                "src": "7383:9:10",
                "type": ""
              }
            ],
            "src": "7316:130:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "7501:258:10",
              "statements": [
                {
                  "nodeType": "YulVariableDeclaration",
                  "src": "7511:10:10",
                  "value": {
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "7520:1:10",
                    "type": "",
                    "value": "0"
                  },
                  "variables": [
                    {
                      "name": "i",
                      "nodeType": "YulTypedName",
                      "src": "7515:1:10",
                      "type": ""
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "7580:63:10",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "dst",
                                  "nodeType": "YulIdentifier",
                                  "src": "7605:3:10"
                                },
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "7610:1:10"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "7601:3:10"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7601:11:10"
                            },
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "7624:3:10"
                                    },
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "7629:1:10"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "7620:3:10"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7620:11:10"
                                }
                              ],
                              "functionName": {
                                "name": "mload",
                                "nodeType": "YulIdentifier",
                                "src": "7614:5:10"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7614:18:10"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nodeType": "YulIdentifier",
                            "src": "7594:6:10"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "7594:39:10"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "7594:39:10"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "name": "i",
                        "nodeType": "YulIdentifier",
                        "src": "7541:1:10"
                      },
                      {
                        "name": "length",
                        "nodeType": "YulIdentifier",
                        "src": "7544:6:10"
                      }
                    ],
                    "functionName": {
                      "name": "lt",
                      "nodeType": "YulIdentifier",
                      "src": "7538:2:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "7538:13:10"
                  },
                  "nodeType": "YulForLoop",
                  "post": {
                    "nodeType": "YulBlock",
                    "src": "7552:19:10",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "7554:15:10",
                        "value": {
                          "arguments": [
                            {
                              "name": "i",
                              "nodeType": "YulIdentifier",
                              "src": "7563:1:10"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "7566:2:10",
                              "type": "",
                              "value": "32"
                            }
                          ],
                          "functionName": {
                            "name": "add",
                            "nodeType": "YulIdentifier",
                            "src": "7559:3:10"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "7559:10:10"
                        },
                        "variableNames": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "7554:1:10"
                          }
                        ]
                      }
                    ]
                  },
                  "pre": {
                    "nodeType": "YulBlock",
                    "src": "7534:3:10",
                    "statements": []
                  },
                  "src": "7530:113:10"
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "7677:76:10",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "dst",
                                  "nodeType": "YulIdentifier",
                                  "src": "7727:3:10"
                                },
                                {
                                  "name": "length",
                                  "nodeType": "YulIdentifier",
                                  "src": "7732:6:10"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "7723:3:10"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7723:16:10"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "7741:1:10",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nodeType": "YulIdentifier",
                            "src": "7716:6:10"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "7716:27:10"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "7716:27:10"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "name": "i",
                        "nodeType": "YulIdentifier",
                        "src": "7658:1:10"
                      },
                      {
                        "name": "length",
                        "nodeType": "YulIdentifier",
                        "src": "7661:6:10"
                      }
                    ],
                    "functionName": {
                      "name": "gt",
                      "nodeType": "YulIdentifier",
                      "src": "7655:2:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "7655:13:10"
                  },
                  "nodeType": "YulIf",
                  "src": "7652:2:10"
                }
              ]
            },
            "name": "copy_memory_to_memory",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "src",
                "nodeType": "YulTypedName",
                "src": "7483:3:10",
                "type": ""
              },
              {
                "name": "dst",
                "nodeType": "YulTypedName",
                "src": "7488:3:10",
                "type": ""
              },
              {
                "name": "length",
                "nodeType": "YulTypedName",
                "src": "7493:6:10",
                "type": ""
              }
            ],
            "src": "7452:307:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "7816:269:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "7826:22:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "data",
                        "nodeType": "YulIdentifier",
                        "src": "7840:4:10"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "7846:1:10",
                        "type": "",
                        "value": "2"
                      }
                    ],
                    "functionName": {
                      "name": "div",
                      "nodeType": "YulIdentifier",
                      "src": "7836:3:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "7836:12:10"
                  },
                  "variableNames": [
                    {
                      "name": "length",
                      "nodeType": "YulIdentifier",
                      "src": "7826:6:10"
                    }
                  ]
                },
                {
                  "nodeType": "YulVariableDeclaration",
                  "src": "7857:38:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "data",
                        "nodeType": "YulIdentifier",
                        "src": "7887:4:10"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "7893:1:10",
                        "type": "",
                        "value": "1"
                      }
                    ],
                    "functionName": {
                      "name": "and",
                      "nodeType": "YulIdentifier",
                      "src": "7883:3:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "7883:12:10"
                  },
                  "variables": [
                    {
                      "name": "outOfPlaceEncoding",
                      "nodeType": "YulTypedName",
                      "src": "7861:18:10",
                      "type": ""
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "7934:51:10",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "7948:27:10",
                        "value": {
                          "arguments": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "7962:6:10"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "7970:4:10",
                              "type": "",
                              "value": "0x7f"
                            }
                          ],
                          "functionName": {
                            "name": "and",
                            "nodeType": "YulIdentifier",
                            "src": "7958:3:10"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "7958:17:10"
                        },
                        "variableNames": [
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "7948:6:10"
                          }
                        ]
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "name": "outOfPlaceEncoding",
                        "nodeType": "YulIdentifier",
                        "src": "7914:18:10"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "7907:6:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "7907:26:10"
                  },
                  "nodeType": "YulIf",
                  "src": "7904:2:10"
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "8037:42:10",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "functionName": {
                            "name": "panic_error_0x22",
                            "nodeType": "YulIdentifier",
                            "src": "8051:16:10"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "8051:18:10"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "8051:18:10"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "name": "outOfPlaceEncoding",
                        "nodeType": "YulIdentifier",
                        "src": "8001:18:10"
                      },
                      {
                        "arguments": [
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "8024:6:10"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8032:2:10",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "8021:2:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8021:14:10"
                      }
                    ],
                    "functionName": {
                      "name": "eq",
                      "nodeType": "YulIdentifier",
                      "src": "7998:2:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "7998:38:10"
                  },
                  "nodeType": "YulIf",
                  "src": "7995:2:10"
                }
              ]
            },
            "name": "extract_byte_array_length",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "data",
                "nodeType": "YulTypedName",
                "src": "7800:4:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "length",
                "nodeType": "YulTypedName",
                "src": "7809:6:10",
                "type": ""
              }
            ],
            "src": "7765:320:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "8134:190:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "8144:33:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "8171:5:10"
                      }
                    ],
                    "functionName": {
                      "name": "cleanup_t_uint256",
                      "nodeType": "YulIdentifier",
                      "src": "8153:17:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "8153:24:10"
                  },
                  "variableNames": [
                    {
                      "name": "value",
                      "nodeType": "YulIdentifier",
                      "src": "8144:5:10"
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "8267:22:10",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "functionName": {
                            "name": "panic_error_0x11",
                            "nodeType": "YulIdentifier",
                            "src": "8269:16:10"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "8269:18:10"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "8269:18:10"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "8192:5:10"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "8199:66:10",
                        "type": "",
                        "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                      }
                    ],
                    "functionName": {
                      "name": "eq",
                      "nodeType": "YulIdentifier",
                      "src": "8189:2:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "8189:77:10"
                  },
                  "nodeType": "YulIf",
                  "src": "8186:2:10"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "8298:20:10",
                  "value": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "8309:5:10"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "8316:1:10",
                        "type": "",
                        "value": "1"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "8305:3:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "8305:13:10"
                  },
                  "variableNames": [
                    {
                      "name": "ret",
                      "nodeType": "YulIdentifier",
                      "src": "8298:3:10"
                    }
                  ]
                }
              ]
            },
            "name": "increment_t_uint256",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "8120:5:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "ret",
                "nodeType": "YulTypedName",
                "src": "8130:3:10",
                "type": ""
              }
            ],
            "src": "8091:233:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "8358:152:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "8375:1:10",
                        "type": "",
                        "value": "0"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "8378:77:10",
                        "type": "",
                        "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "8368:6:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "8368:88:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "8368:88:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "8472:1:10",
                        "type": "",
                        "value": "4"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "8475:4:10",
                        "type": "",
                        "value": "0x11"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "8465:6:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "8465:15:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "8465:15:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "8496:1:10",
                        "type": "",
                        "value": "0"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "8499:4:10",
                        "type": "",
                        "value": "0x24"
                      }
                    ],
                    "functionName": {
                      "name": "revert",
                      "nodeType": "YulIdentifier",
                      "src": "8489:6:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "8489:15:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "8489:15:10"
                }
              ]
            },
            "name": "panic_error_0x11",
            "nodeType": "YulFunctionDefinition",
            "src": "8330:180:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "8544:152:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "8561:1:10",
                        "type": "",
                        "value": "0"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "8564:77:10",
                        "type": "",
                        "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "8554:6:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "8554:88:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "8554:88:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "8658:1:10",
                        "type": "",
                        "value": "4"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "8661:4:10",
                        "type": "",
                        "value": "0x22"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "8651:6:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "8651:15:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "8651:15:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "8682:1:10",
                        "type": "",
                        "value": "0"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "8685:4:10",
                        "type": "",
                        "value": "0x24"
                      }
                    ],
                    "functionName": {
                      "name": "revert",
                      "nodeType": "YulIdentifier",
                      "src": "8675:6:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "8675:15:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "8675:15:10"
                }
              ]
            },
            "name": "panic_error_0x22",
            "nodeType": "YulFunctionDefinition",
            "src": "8516:180:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "8750:54:10",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "8760:38:10",
                  "value": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "8778:5:10"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8785:2:10",
                            "type": "",
                            "value": "31"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "8774:3:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8774:14:10"
                      },
                      {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8794:2:10",
                            "type": "",
                            "value": "31"
                          }
                        ],
                        "functionName": {
                          "name": "not",
                          "nodeType": "YulIdentifier",
                          "src": "8790:3:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8790:7:10"
                      }
                    ],
                    "functionName": {
                      "name": "and",
                      "nodeType": "YulIdentifier",
                      "src": "8770:3:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "8770:28:10"
                  },
                  "variableNames": [
                    {
                      "name": "result",
                      "nodeType": "YulIdentifier",
                      "src": "8760:6:10"
                    }
                  ]
                }
              ]
            },
            "name": "round_up_to_mul_of_32",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "8733:5:10",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "result",
                "nodeType": "YulTypedName",
                "src": "8743:6:10",
                "type": ""
              }
            ],
            "src": "8702:102:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "8916:68:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "8938:6:10"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8946:1:10",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "8934:3:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8934:14:10"
                      },
                      {
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "8950:26:10",
                        "type": "",
                        "value": "caller must be the owner"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "8927:6:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "8927:50:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "8927:50:10"
                }
              ]
            },
            "name": "store_literal_in_memory_3bfff96132c9b3295fc212b6fbfc1c5174f6f9be7b52a9aff62731c1d8706a0b",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "memPtr",
                "nodeType": "YulTypedName",
                "src": "8908:6:10",
                "type": ""
              }
            ],
            "src": "8810:174:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "9096:64:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "9118:6:10"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9126:1:10",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "9114:3:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9114:14:10"
                      },
                      {
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "9130:22:10",
                        "type": "",
                        "value": "Insufficient balance"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "9107:6:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "9107:46:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "9107:46:10"
                }
              ]
            },
            "name": "store_literal_in_memory_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "memPtr",
                "nodeType": "YulTypedName",
                "src": "9088:6:10",
                "type": ""
              }
            ],
            "src": "8990:170:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "9272:70:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "9294:6:10"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9302:1:10",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "9290:3:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9290:14:10"
                      },
                      {
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "9306:28:10",
                        "type": "",
                        "value": "Invalid amount for staking"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "9283:6:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "9283:52:10"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "9283:52:10"
                }
              ]
            },
            "name": "store_literal_in_memory_b257b1e934d701b679ee811a2b762f8468ef7697dcca50c5076538ec8bfc9e26",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "memPtr",
                "nodeType": "YulTypedName",
                "src": "9264:6:10",
                "type": ""
              }
            ],
            "src": "9166:176:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "9391:79:10",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "9448:16:10",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "9457:1:10",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "9460:1:10",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "9450:6:10"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "9450:12:10"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "9450:12:10"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "9414:5:10"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "9439:5:10"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "9421:17:10"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9421:24:10"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "9411:2:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9411:35:10"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "9404:6:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "9404:43:10"
                  },
                  "nodeType": "YulIf",
                  "src": "9401:2:10"
                }
              ]
            },
            "name": "validator_revert_t_address",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "9384:5:10",
                "type": ""
              }
            ],
            "src": "9348:122:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "9516:76:10",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "9570:16:10",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "9579:1:10",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "9582:1:10",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "9572:6:10"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "9572:12:10"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "9572:12:10"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "9539:5:10"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "9561:5:10"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_bool",
                              "nodeType": "YulIdentifier",
                              "src": "9546:14:10"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9546:21:10"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "9536:2:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9536:32:10"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "9529:6:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "9529:40:10"
                  },
                  "nodeType": "YulIf",
                  "src": "9526:2:10"
                }
              ]
            },
            "name": "validator_revert_t_bool",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "9509:5:10",
                "type": ""
              }
            ],
            "src": "9476:116:10"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "9641:79:10",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "9698:16:10",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "9707:1:10",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "9710:1:10",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "9700:6:10"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "9700:12:10"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "9700:12:10"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "9664:5:10"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "9689:5:10"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "9671:17:10"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9671:24:10"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "9661:2:10"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9661:35:10"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "9654:6:10"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "9654:43:10"
                  },
                  "nodeType": "YulIf",
                  "src": "9651:2:10"
                }
              ]
            },
            "name": "validator_revert_t_uint256",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "9634:5:10",
                "type": ""
              }
            ],
            "src": "9598:122:10"
          }
        ]
      },
      "contents": "{\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_contract$_AceToken_$1016_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_AceToken_$1016_to_t_address(value))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_stringliteral_3bfff96132c9b3295fc212b6fbfc1c5174f6f9be7b52a9aff62731c1d8706a0b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_3bfff96132c9b3295fc212b6fbfc1c5174f6f9be7b52a9aff62731c1d8706a0b(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)\n        store_literal_in_memory_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_b257b1e934d701b679ee811a2b762f8468ef7697dcca50c5076538ec8bfc9e26_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 26)\n        store_literal_in_memory_b257b1e934d701b679ee811a2b762f8468ef7697dcca50c5076538ec8bfc9e26(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_contract$_AceToken_$1016__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_AceToken_$1016_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_3bfff96132c9b3295fc212b6fbfc1c5174f6f9be7b52a9aff62731c1d8706a0b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3bfff96132c9b3295fc212b6fbfc1c5174f6f9be7b52a9aff62731c1d8706a0b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_b257b1e934d701b679ee811a2b762f8468ef7697dcca50c5076538ec8bfc9e26__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b257b1e934d701b679ee811a2b762f8468ef7697dcca50c5076538ec8bfc9e26_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function convert_t_contract$_AceToken_$1016_to_t_address(value) -> converted {\n        converted := convert_t_contract$_AceToken_$1016_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_AceToken_$1016_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(value)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function store_literal_in_memory_3bfff96132c9b3295fc212b6fbfc1c5174f6f9be7b52a9aff62731c1d8706a0b(memPtr) {\n\n        mstore(add(memPtr, 0), \"caller must be the owner\")\n\n    }\n\n    function store_literal_in_memory_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5(memPtr) {\n\n        mstore(add(memPtr, 0), \"Insufficient balance\")\n\n    }\n\n    function store_literal_in_memory_b257b1e934d701b679ee811a2b762f8468ef7697dcca50c5076538ec8bfc9e26(memPtr) {\n\n        mstore(add(memPtr, 0), \"Invalid amount for staking\")\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n",
      "id": 10,
      "language": "Yul",
      "name": "#utility.yul"
    }
  ],
  "sourceMap": "294:2922:9:-:0;;;319:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;938:97;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;991:9;980:8;;:20;;;;;;;;;;;;;;;;;;1018:10;1010:5;;:18;;;;;;;;;;;;;;;;;;938:97;294:2922;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:177:10:-;;112:6;106:13;97:22;;128:50;172:5;128:50;:::i;:::-;87:97;;;;:::o;190:318::-;;326:2;314:9;305:7;301:23;297:32;294:2;;;342:1;339;332:12;294:2;385:1;410:81;483:7;474:6;463:9;459:22;410:81;:::i;:::-;400:91;;356:145;284:224;;;;:::o;514:96::-;;580:24;598:5;580:24;:::i;:::-;569:35;;559:51;;;:::o;616:113::-;;699:24;717:5;699:24;:::i;:::-;688:35;;678:51;;;:::o;735:126::-;;812:42;805:5;801:54;790:65;;780:81;;;:::o;867:320::-;;948:1;942:4;938:12;928:22;;995:1;989:4;985:12;1016:18;1006:2;;1072:4;1064:6;1060:17;1050:27;;1006:2;1134;1126:6;1123:14;1103:18;1100:38;1097:2;;;1153:18;;:::i;:::-;1097:2;918:269;;;;:::o;1193:180::-;1241:77;1238:1;1231:88;1338:4;1335:1;1328:15;1362:4;1359:1;1352:15;1379:156;1469:41;1504:5;1469:41;:::i;:::-;1462:5;1459:52;1449:2;;1525:1;1522;1515:12;1449:2;1439:96;:::o;294:2922:9:-;;;;;;;",
  "deployedSourceMap": "294:2922:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;319:38;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1816:451;;;;;;;;;;;;;:::i;:::-;;571:46;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1216:464;;;;;;;;;;;;;:::i;:::-;;723:41;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3115:99;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;363:20;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2399:598;;;:::i;:::-;;389:24;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;676:41;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;470:24;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;319:38;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1816:451::-;1959:1;1930:14;:26;1945:10;1930:26;;;;;;;;;;;;;;;;:30;1922:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;1996:15;2014:14;:26;2029:10;2014:26;;;;;;;;;;;;;;;;1996:44;;2122:1;2093:14;:26;2108:10;2093:26;;;;;;;;;;;;;;;:30;;;;2157:5;2133:9;:21;2143:10;2133:21;;;;;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;2227:10;2219:28;;:40;2248:10;2219:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1816:451;:::o;571:46::-;;;;;;;;;;;;;;;;;:::o;1216:464::-;1332:5;;;;;;;;;;;1318:19;;:10;:19;;;1310:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;1433:6;1428:246;1445:7;:14;;;;1443:1;:16;1428:246;;;1480:17;1500:7;1508:1;1500:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1480:30;;1524:12;1539:14;:25;1554:9;1539:25;;;;;;;;;;;;;;;;1524:40;;1591:1;1581:7;:11;1578:86;;;1612:8;;;;;;;;;;;:17;;;1630:9;1641:7;1612:37;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1578:86;1428:246;;1461:3;;;;;:::i;:::-;;;;1428:246;;;;1216:464::o;723:41::-;;;;;;;;;;;;;;;;;;;;;;:::o;3115:99::-;3158:4;3181:14;:26;3196:10;3181:26;;;;;;;;;;;;;;;;3174:33;;3115:99;:::o;363:20::-;;;;;;;;;;;;;:::o;2399:598::-;2530:1;2518:9;:13;2510:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;2603:9;2573:14;:26;2588:10;2573:26;;;;;;;;;;;;;;;;:39;;;;;;;:::i;:::-;;;;;;;;2709:9;:21;2719:10;2709:21;;;;;;;;;;;;;;;;;;;;;;;;;2705:76;;2746:7;2759:10;2746:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2705:76;2857:4;2833:9;:21;2843:10;2833:21;;;;;;;;;;;;;;;;:28;;;;;;;;;;;;;;;;;;2895:4;2871:9;:21;2881:10;2871:21;;;;;;;;;;;;;;;;:28;;;;;;;;;;;;;;;;;;2950:8;;;;;;;;;;;:17;;;2968:10;2980:9;2950:40;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2399:598::o;389:24::-;;;;;;;;;;;;;:::o;676:41::-;;;;;;;;;;;;;;;;;;;;;;:::o;470:24::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7:139:10:-;;91:6;78:20;69:29;;107:33;134:5;107:33;:::i;:::-;59:87;;;;:::o;152:137::-;;237:6;231:13;222:22;;253:30;277:5;253:30;:::i;:::-;212:77;;;;:::o;295:139::-;;379:6;366:20;357:29;;395:33;422:5;395:33;:::i;:::-;347:87;;;;:::o;440:262::-;;548:2;536:9;527:7;523:23;519:32;516:2;;;564:1;561;554:12;516:2;607:1;632:53;677:7;668:6;657:9;653:22;632:53;:::i;:::-;622:63;;578:117;506:196;;;;:::o;708:278::-;;824:2;812:9;803:7;799:23;795:32;792:2;;;840:1;837;830:12;792:2;883:1;908:61;961:7;952:6;941:9;937:22;908:61;:::i;:::-;898:71;;854:125;782:204;;;;:::o;992:262::-;;1100:2;1088:9;1079:7;1075:23;1071:32;1068:2;;;1116:1;1113;1106:12;1068:2;1159:1;1184:53;1229:7;1220:6;1209:9;1205:22;1184:53;:::i;:::-;1174:63;;1130:117;1058:196;;;;:::o;1260:118::-;1347:24;1365:5;1347:24;:::i;:::-;1342:3;1335:37;1325:53;;:::o;1384:109::-;1465:21;1480:5;1465:21;:::i;:::-;1460:3;1453:34;1443:50;;:::o;1499:165::-;1603:54;1651:5;1603:54;:::i;:::-;1598:3;1591:67;1581:83;;:::o;1670:364::-;;1786:39;1819:5;1786:39;:::i;:::-;1841:71;1905:6;1900:3;1841:71;:::i;:::-;1834:78;;1921:52;1966:6;1961:3;1954:4;1947:5;1943:16;1921:52;:::i;:::-;1998:29;2020:6;1998:29;:::i;:::-;1993:3;1989:39;1982:46;;1762:272;;;;;:::o;2040:366::-;;2203:67;2267:2;2262:3;2203:67;:::i;:::-;2196:74;;2279:93;2368:3;2279:93;:::i;:::-;2397:2;2392:3;2388:12;2381:19;;2186:220;;;:::o;2412:366::-;;2575:67;2639:2;2634:3;2575:67;:::i;:::-;2568:74;;2651:93;2740:3;2651:93;:::i;:::-;2769:2;2764:3;2760:12;2753:19;;2558:220;;;:::o;2784:366::-;;2947:67;3011:2;3006:3;2947:67;:::i;:::-;2940:74;;3023:93;3112:3;3023:93;:::i;:::-;3141:2;3136:3;3132:12;3125:19;;2930:220;;;:::o;3156:118::-;3243:24;3261:5;3243:24;:::i;:::-;3238:3;3231:37;3221:53;;:::o;3280:222::-;;3411:2;3400:9;3396:18;3388:26;;3424:71;3492:1;3481:9;3477:17;3468:6;3424:71;:::i;:::-;3378:124;;;;:::o;3508:332::-;;3667:2;3656:9;3652:18;3644:26;;3680:71;3748:1;3737:9;3733:17;3724:6;3680:71;:::i;:::-;3761:72;3829:2;3818:9;3814:18;3805:6;3761:72;:::i;:::-;3634:206;;;;;:::o;3846:210::-;;3971:2;3960:9;3956:18;3948:26;;3984:65;4046:1;4035:9;4031:17;4022:6;3984:65;:::i;:::-;3938:118;;;;:::o;4062:256::-;;4210:2;4199:9;4195:18;4187:26;;4223:88;4308:1;4297:9;4293:17;4284:6;4223:88;:::i;:::-;4177:141;;;;:::o;4324:313::-;;4475:2;4464:9;4460:18;4452:26;;4524:9;4518:4;4514:20;4510:1;4499:9;4495:17;4488:47;4552:78;4625:4;4616:6;4552:78;:::i;:::-;4544:86;;4442:195;;;;:::o;4643:419::-;;4847:2;4836:9;4832:18;4824:26;;4896:9;4890:4;4886:20;4882:1;4871:9;4867:17;4860:47;4924:131;5050:4;4924:131;:::i;:::-;4916:139;;4814:248;;;:::o;5068:419::-;;5272:2;5261:9;5257:18;5249:26;;5321:9;5315:4;5311:20;5307:1;5296:9;5292:17;5285:47;5349:131;5475:4;5349:131;:::i;:::-;5341:139;;5239:248;;;:::o;5493:419::-;;5697:2;5686:9;5682:18;5674:26;;5746:9;5740:4;5736:20;5732:1;5721:9;5717:17;5710:47;5774:131;5900:4;5774:131;:::i;:::-;5766:139;;5664:248;;;:::o;5918:222::-;;6049:2;6038:9;6034:18;6026:26;;6062:71;6130:1;6119:9;6115:17;6106:6;6062:71;:::i;:::-;6016:124;;;;:::o;6146:99::-;;6232:5;6226:12;6216:22;;6205:40;;;:::o;6251:169::-;;6369:6;6364:3;6357:19;6409:4;6404:3;6400:14;6385:29;;6347:73;;;;:::o;6426:305::-;;6485:20;6503:1;6485:20;:::i;:::-;6480:25;;6519:20;6537:1;6519:20;:::i;:::-;6514:25;;6673:1;6605:66;6601:74;6598:1;6595:81;6592:2;;;6679:18;;:::i;:::-;6592:2;6723:1;6720;6716:9;6709:16;;6470:261;;;;:::o;6737:96::-;;6803:24;6821:5;6803:24;:::i;:::-;6792:35;;6782:51;;;:::o;6839:90::-;;6916:5;6909:13;6902:21;6891:32;;6881:48;;;:::o;6935:126::-;;7012:42;7005:5;7001:54;6990:65;;6980:81;;;:::o;7067:77::-;;7133:5;7122:16;;7112:32;;;:::o;7150:160::-;;7250:54;7298:5;7250:54;:::i;:::-;7237:67;;7227:83;;;:::o;7316:130::-;;7416:24;7434:5;7416:24;:::i;:::-;7403:37;;7393:53;;;:::o;7452:307::-;7520:1;7530:113;7544:6;7541:1;7538:13;7530:113;;;7629:1;7624:3;7620:11;7614:18;7610:1;7605:3;7601:11;7594:39;7566:2;7563:1;7559:10;7554:15;;7530:113;;;7661:6;7658:1;7655:13;7652:2;;;7741:1;7732:6;7727:3;7723:16;7716:27;7652:2;7501:258;;;;:::o;7765:320::-;;7846:1;7840:4;7836:12;7826:22;;7893:1;7887:4;7883:12;7914:18;7904:2;;7970:4;7962:6;7958:17;7948:27;;7904:2;8032;8024:6;8021:14;8001:18;7998:38;7995:2;;;8051:18;;:::i;:::-;7995:2;7816:269;;;;:::o;8091:233::-;;8153:24;8171:5;8153:24;:::i;:::-;8144:33;;8199:66;8192:5;8189:77;8186:2;;;8269:18;;:::i;:::-;8186:2;8316:1;8309:5;8305:13;8298:20;;8134:190;;;:::o;8330:180::-;8378:77;8375:1;8368:88;8475:4;8472:1;8465:15;8499:4;8496:1;8489:15;8516:180;8564:77;8561:1;8554:88;8661:4;8658:1;8651:15;8685:4;8682:1;8675:15;8702:102;;8794:2;8790:7;8785:2;8778:5;8774:14;8770:28;8760:38;;8750:54;;;:::o;8810:174::-;8950:26;8946:1;8938:6;8934:14;8927:50;8916:68;:::o;8990:170::-;9130:22;9126:1;9118:6;9114:14;9107:46;9096:64;:::o;9166:176::-;9306:28;9302:1;9294:6;9290:14;9283:52;9272:70;:::o;9348:122::-;9421:24;9439:5;9421:24;:::i;:::-;9414:5;9411:35;9401:2;;9460:1;9457;9450:12;9401:2;9391:79;:::o;9476:116::-;9546:21;9561:5;9546:21;:::i;:::-;9539:5;9536:32;9526:2;;9582:1;9579;9572:12;9526:2;9516:76;:::o;9598:122::-;9671:24;9689:5;9671:24;:::i;:::-;9664:5;9661:35;9651:2;;9710:1;9707;9700:12;9651:2;9641:79;:::o",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.2;\n\nimport \"./AceToken.sol\";\n\n\n/// @title Contract for Yield Farming\n/// @author Alfred Varghese Jose\n/// @notice Allows users to stake their crypto assets and get ACE Token Rewards\n/// @dev ETH is the crypto asset used currently for staking\ncontract TokenFarm {\n    string public name = \"Dapp Token Farm\";\n    address public owner;\n    AceToken public aceToken;\n\n    /// @notice List of all the current investors\n    address[] public stakers;\n\n    /// @notice Mapping of investor address and their staking balance\n    mapping(address => uint) public stakingBalance;\n\n    /// @notice Mapping of investors staking status\n    mapping(address => bool) public hasStaked;\n    mapping(address => bool) public isStaking;\n\n    /// @param _aceToken Reference to an AceToken instance used for initializing TokenFarm contract\n    /// @dev Owner variable set as contract creator for future use\n    constructor(AceToken _aceToken) {\n        aceToken = _aceToken;\n        owner = msg.sender;\n    }\n\n\n    /// @notice Allows contract owners to issue dividends for investors\n    /// @dev Addresses in stakers array will recieve dividends equal to their current staking balance\n    function issueTokens() public {\n        /// @notice Only owner can call this function\n        require(msg.sender == owner, \"caller must be the owner\");\n\n        /// @notice Issue dividends to all stakers\n        for (uint i=0; i<stakers.length; i++) {\n            address recipient = stakers[i];\n            uint balance = stakingBalance[recipient];\n            if(balance > 0) {\n                aceToken.transfer(recipient, balance);\n            }\n        }\n    }\n\n\n    /// @notice Allows users to unstake their crypto assets\n    /// @dev Entire ETH staking balance is paid back to the investor\n    function sendEther() public {\n        /// @notice Staking balance amount should be greater than 0\n        require(stakingBalance[msg.sender] > 0, \"Insufficient balance\");\n\n        uint ethBalance = stakingBalance[msg.sender];\n\n        /// @notice Update staking status\n        stakingBalance[msg.sender] = 0;\n        isStaking[msg.sender] = false;\n\n        /// @notice Send ETH back to investor\n        payable(msg.sender).transfer(ethBalance);\n\n    }\n\n\n    /// @notice Allows users to stake their crypto assets\n    /// @dev Same value of ACE Tokens are rewarded to the investor\n    function recieveEther() external payable {\n        /// @notice Staking amount should be greater than 0\n        require(msg.value > 0, \"Invalid amount for staking\");\n\n        stakingBalance[msg.sender] += msg.value;\n\n        /// @notice Add user to stakers array only if they haven't staked already\n        if(!hasStaked[msg.sender]) {\n            stakers.push(msg.sender);\n        }\n\n        /// @notice Update staking status\n        isStaking[msg.sender] = true;\n        hasStaked[msg.sender] = true;\n\n        /// @notice Issue Token Rewards\n        aceToken.transfer(msg.sender, msg.value);\n    }\n    \n\n    /// @notice Returns the staking balance of an investor\n    /// @return Staking balance of the investor\n    function showBalance() public view returns(uint) {\n        return stakingBalance[msg.sender];\n    }\n}\n",
  "sourcePath": "/home/avj17/Consensys/Final Project/blockchain-developer-bootcamp-final-project/src/contracts/TokenFarm.sol",
  "ast": {
    "absolutePath": "project:/src/contracts/TokenFarm.sol",
    "exportedSymbols": {
      "AceToken": [
        1016
      ],
      "Context": [
        928
      ],
      "ERC20": [
        741
      ],
      "ERC20Burnable": [
        881
      ],
      "IERC20": [
        819
      ],
      "IERC20Metadata": [
        906
      ],
      "Ownable": [
        103
      ],
      "Pausable": [
        195
      ],
      "TokenFarm": [
        1262
      ]
    },
    "id": 1263,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1051,
        "literals": [
          "solidity",
          "0.8",
          ".2"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:22:9"
      },
      {
        "absolutePath": "project:/src/contracts/AceToken.sol",
        "file": "./AceToken.sol",
        "id": 1052,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1263,
        "sourceUnit": 1017,
        "src": "56:24:9",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 1053,
          "nodeType": "StructuredDocumentation",
          "src": "83:211:9",
          "text": "@title Contract for Yield Farming\n @author Alfred Varghese Jose\n @notice Allows users to stake their crypto assets and get ACE Token Rewards\n @dev ETH is the crypto asset used currently for staking"
        },
        "fullyImplemented": true,
        "id": 1262,
        "linearizedBaseContracts": [
          1262
        ],
        "name": "TokenFarm",
        "nameLocation": "303:9:9",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "06fdde03",
            "id": 1056,
            "mutability": "mutable",
            "name": "name",
            "nameLocation": "333:4:9",
            "nodeType": "VariableDeclaration",
            "scope": 1262,
            "src": "319:38:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 1054,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "319:6:9",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "hexValue": "4461707020546f6b656e204661726d",
              "id": 1055,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "340:17:9",
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_112892b16fc49edc60aefbde9609f7bfe1cf220ba7ef93ec6845dbc0b0b30cd5",
                "typeString": "literal_string \"Dapp Token Farm\""
              },
              "value": "Dapp Token Farm"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "8da5cb5b",
            "id": 1058,
            "mutability": "mutable",
            "name": "owner",
            "nameLocation": "378:5:9",
            "nodeType": "VariableDeclaration",
            "scope": 1262,
            "src": "363:20:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1057,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "363:7:9",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "958285a1",
            "id": 1061,
            "mutability": "mutable",
            "name": "aceToken",
            "nameLocation": "405:8:9",
            "nodeType": "VariableDeclaration",
            "scope": 1262,
            "src": "389:24:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_AceToken_$1016",
              "typeString": "contract AceToken"
            },
            "typeName": {
              "id": 1060,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 1059,
                "name": "AceToken",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 1016,
                "src": "389:8:9"
              },
              "referencedDeclaration": 1016,
              "src": "389:8:9",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_AceToken_$1016",
                "typeString": "contract AceToken"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "documentation": {
              "id": 1062,
              "nodeType": "StructuredDocumentation",
              "src": "420:45:9",
              "text": "@notice List of all the current investors"
            },
            "functionSelector": "fd5e6dd1",
            "id": 1065,
            "mutability": "mutable",
            "name": "stakers",
            "nameLocation": "487:7:9",
            "nodeType": "VariableDeclaration",
            "scope": 1262,
            "src": "470:24:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_address_$dyn_storage",
              "typeString": "address[]"
            },
            "typeName": {
              "baseType": {
                "id": 1063,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "470:7:9",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "id": 1064,
              "nodeType": "ArrayTypeName",
              "src": "470:9:9",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                "typeString": "address[]"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "documentation": {
              "id": 1066,
              "nodeType": "StructuredDocumentation",
              "src": "501:65:9",
              "text": "@notice Mapping of investor address and their staking balance"
            },
            "functionSelector": "45bc78ab",
            "id": 1070,
            "mutability": "mutable",
            "name": "stakingBalance",
            "nameLocation": "603:14:9",
            "nodeType": "VariableDeclaration",
            "scope": 1262,
            "src": "571:46:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 1069,
              "keyType": {
                "id": 1067,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "579:7:9",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "571:24:9",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 1068,
                "name": "uint",
                "nodeType": "ElementaryTypeName",
                "src": "590:4:9",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "documentation": {
              "id": 1071,
              "nodeType": "StructuredDocumentation",
              "src": "624:47:9",
              "text": "@notice Mapping of investors staking status"
            },
            "functionSelector": "c93c8f34",
            "id": 1075,
            "mutability": "mutable",
            "name": "hasStaked",
            "nameLocation": "708:9:9",
            "nodeType": "VariableDeclaration",
            "scope": 1262,
            "src": "676:41:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 1074,
              "keyType": {
                "id": 1072,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "684:7:9",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "676:24:9",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 1073,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "695:4:9",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "6f49712b",
            "id": 1079,
            "mutability": "mutable",
            "name": "isStaking",
            "nameLocation": "755:9:9",
            "nodeType": "VariableDeclaration",
            "scope": 1262,
            "src": "723:41:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 1078,
              "keyType": {
                "id": 1076,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "731:7:9",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "723:24:9",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 1077,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "742:4:9",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 1095,
              "nodeType": "Block",
              "src": "970:65:9",
              "statements": [
                {
                  "expression": {
                    "id": 1088,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1086,
                      "name": "aceToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1061,
                      "src": "980:8:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AceToken_$1016",
                        "typeString": "contract AceToken"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1087,
                      "name": "_aceToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1083,
                      "src": "991:9:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AceToken_$1016",
                        "typeString": "contract AceToken"
                      }
                    },
                    "src": "980:20:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_AceToken_$1016",
                      "typeString": "contract AceToken"
                    }
                  },
                  "id": 1089,
                  "nodeType": "ExpressionStatement",
                  "src": "980:20:9"
                },
                {
                  "expression": {
                    "id": 1093,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1090,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1058,
                      "src": "1010:5:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 1091,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4294967281,
                        "src": "1018:3:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 1092,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "1018:10:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1010:18:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1094,
                  "nodeType": "ExpressionStatement",
                  "src": "1010:18:9"
                }
              ]
            },
            "documentation": {
              "id": 1080,
              "nodeType": "StructuredDocumentation",
              "src": "771:162:9",
              "text": "@param _aceToken Reference to an AceToken instance used for initializing TokenFarm contract\n @dev Owner variable set as contract creator for future use"
            },
            "id": 1096,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1084,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1083,
                  "mutability": "mutable",
                  "name": "_aceToken",
                  "nameLocation": "959:9:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 1096,
                  "src": "950:18:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_AceToken_$1016",
                    "typeString": "contract AceToken"
                  },
                  "typeName": {
                    "id": 1082,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1081,
                      "name": "AceToken",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1016,
                      "src": "950:8:9"
                    },
                    "referencedDeclaration": 1016,
                    "src": "950:8:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_AceToken_$1016",
                      "typeString": "contract AceToken"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "949:20:9"
            },
            "returnParameters": {
              "id": 1085,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "970:0:9"
            },
            "scope": 1262,
            "src": "938:97:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1145,
              "nodeType": "Block",
              "src": "1246:434:9",
              "statements": [
                {
                  "documentation": "@notice Only owner can call this function",
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 1104,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 1101,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967281,
                            "src": "1318:3:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 1102,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1318:10:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 1103,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1058,
                          "src": "1332:5:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1318:19:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "63616c6c6572206d75737420626520746865206f776e6572",
                        "id": 1105,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1339:26:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3bfff96132c9b3295fc212b6fbfc1c5174f6f9be7b52a9aff62731c1d8706a0b",
                          "typeString": "literal_string \"caller must be the owner\""
                        },
                        "value": "caller must be the owner"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3bfff96132c9b3295fc212b6fbfc1c5174f6f9be7b52a9aff62731c1d8706a0b",
                          "typeString": "literal_string \"caller must be the owner\""
                        }
                      ],
                      "id": 1100,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "1310:7:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1106,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1310:56:9",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1107,
                  "nodeType": "ExpressionStatement",
                  "src": "1310:56:9"
                },
                {
                  "body": {
                    "id": 1143,
                    "nodeType": "Block",
                    "src": "1466:208:9",
                    "statements": [
                      {
                        "assignments": [
                          1120
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1120,
                            "mutability": "mutable",
                            "name": "recipient",
                            "nameLocation": "1488:9:9",
                            "nodeType": "VariableDeclaration",
                            "scope": 1143,
                            "src": "1480:17:9",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 1119,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1480:7:9",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1124,
                        "initialValue": {
                          "baseExpression": {
                            "id": 1121,
                            "name": "stakers",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1065,
                            "src": "1500:7:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_storage",
                              "typeString": "address[] storage ref"
                            }
                          },
                          "id": 1123,
                          "indexExpression": {
                            "id": 1122,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1109,
                            "src": "1508:1:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "1500:10:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1480:30:9"
                      },
                      {
                        "assignments": [
                          1126
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1126,
                            "mutability": "mutable",
                            "name": "balance",
                            "nameLocation": "1529:7:9",
                            "nodeType": "VariableDeclaration",
                            "scope": 1143,
                            "src": "1524:12:9",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1125,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "1524:4:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1130,
                        "initialValue": {
                          "baseExpression": {
                            "id": 1127,
                            "name": "stakingBalance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1070,
                            "src": "1539:14:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 1129,
                          "indexExpression": {
                            "id": 1128,
                            "name": "recipient",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1120,
                            "src": "1554:9:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "1539:25:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1524:40:9"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1133,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1131,
                            "name": "balance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1126,
                            "src": "1581:7:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1132,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1591:1:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1581:11:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1142,
                        "nodeType": "IfStatement",
                        "src": "1578:86:9",
                        "trueBody": {
                          "id": 1141,
                          "nodeType": "Block",
                          "src": "1594:70:9",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 1137,
                                    "name": "recipient",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1120,
                                    "src": "1630:9:9",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 1138,
                                    "name": "balance",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1126,
                                    "src": "1641:7:9",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "id": 1134,
                                    "name": "aceToken",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1061,
                                    "src": "1612:8:9",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_AceToken_$1016",
                                      "typeString": "contract AceToken"
                                    }
                                  },
                                  "id": 1136,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "transfer",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 315,
                                  "src": "1612:17:9",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                    "typeString": "function (address,uint256) external returns (bool)"
                                  }
                                },
                                "id": 1139,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1612:37:9",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 1140,
                              "nodeType": "ExpressionStatement",
                              "src": "1612:37:9"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1115,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 1112,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1109,
                      "src": "1443:1:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 1113,
                        "name": "stakers",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1065,
                        "src": "1445:7:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage",
                          "typeString": "address[] storage ref"
                        }
                      },
                      "id": 1114,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "1445:14:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1443:16:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "documentation": "@notice Issue dividends to all stakers",
                  "id": 1144,
                  "initializationExpression": {
                    "assignments": [
                      1109
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 1109,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "1438:1:9",
                        "nodeType": "VariableDeclaration",
                        "scope": 1144,
                        "src": "1433:6:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1108,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "1433:4:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 1111,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 1110,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1440:1:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "1433:8:9"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 1117,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "1461:3:9",
                      "subExpression": {
                        "id": 1116,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1109,
                        "src": "1461:1:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 1118,
                    "nodeType": "ExpressionStatement",
                    "src": "1461:3:9"
                  },
                  "nodeType": "ForStatement",
                  "src": "1428:246:9"
                }
              ]
            },
            "documentation": {
              "id": 1097,
              "nodeType": "StructuredDocumentation",
              "src": "1042:169:9",
              "text": "@notice Allows contract owners to issue dividends for investors\n @dev Addresses in stakers array will recieve dividends equal to their current staking balance"
            },
            "functionSelector": "60ab5852",
            "id": 1146,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "issueTokens",
            "nameLocation": "1225:11:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1098,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1236:2:9"
            },
            "returnParameters": {
              "id": 1099,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1246:0:9"
            },
            "scope": 1262,
            "src": "1216:464:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1190,
              "nodeType": "Block",
              "src": "1844:423:9",
              "statements": [
                {
                  "documentation": "@notice Staking balance amount should be greater than 0",
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1156,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 1151,
                            "name": "stakingBalance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1070,
                            "src": "1930:14:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 1154,
                          "indexExpression": {
                            "expression": {
                              "id": 1152,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "1945:3:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1153,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "1945:10:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "1930:26:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 1155,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1959:1:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "1930:30:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e73756666696369656e742062616c616e6365",
                        "id": 1157,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1962:22:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                          "typeString": "literal_string \"Insufficient balance\""
                        },
                        "value": "Insufficient balance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                          "typeString": "literal_string \"Insufficient balance\""
                        }
                      ],
                      "id": 1150,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "1922:7:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1158,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1922:63:9",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1159,
                  "nodeType": "ExpressionStatement",
                  "src": "1922:63:9"
                },
                {
                  "assignments": [
                    1161
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1161,
                      "mutability": "mutable",
                      "name": "ethBalance",
                      "nameLocation": "2001:10:9",
                      "nodeType": "VariableDeclaration",
                      "scope": 1190,
                      "src": "1996:15:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1160,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "1996:4:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1166,
                  "initialValue": {
                    "baseExpression": {
                      "id": 1162,
                      "name": "stakingBalance",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1070,
                      "src": "2014:14:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 1165,
                    "indexExpression": {
                      "expression": {
                        "id": 1163,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4294967281,
                        "src": "2029:3:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 1164,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "2029:10:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "2014:26:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1996:44:9"
                },
                {
                  "documentation": "@notice Update staking status",
                  "expression": {
                    "id": 1172,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1167,
                        "name": "stakingBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1070,
                        "src": "2093:14:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 1170,
                      "indexExpression": {
                        "expression": {
                          "id": 1168,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4294967281,
                          "src": "2108:3:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1169,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2108:10:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2093:26:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "30",
                      "id": 1171,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2122:1:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "2093:30:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1173,
                  "nodeType": "ExpressionStatement",
                  "src": "2093:30:9"
                },
                {
                  "expression": {
                    "id": 1179,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1174,
                        "name": "isStaking",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1079,
                        "src": "2133:9:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 1177,
                      "indexExpression": {
                        "expression": {
                          "id": 1175,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4294967281,
                          "src": "2143:3:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1176,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2143:10:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2133:21:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "66616c7365",
                      "id": 1178,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2157:5:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "2133:29:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1180,
                  "nodeType": "ExpressionStatement",
                  "src": "2133:29:9"
                },
                {
                  "documentation": "@notice Send ETH back to investor",
                  "expression": {
                    "arguments": [
                      {
                        "id": 1187,
                        "name": "ethBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1161,
                        "src": "2248:10:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 1183,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "2227:3:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1184,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "2227:10:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1182,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2219:8:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_payable_$",
                            "typeString": "type(address payable)"
                          },
                          "typeName": {
                            "id": 1181,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "2219:8:9",
                            "stateMutability": "payable",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1185,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2219:19:9",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "id": 1186,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "src": "2219:28:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 1188,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2219:40:9",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1189,
                  "nodeType": "ExpressionStatement",
                  "src": "2219:40:9"
                }
              ]
            },
            "documentation": {
              "id": 1147,
              "nodeType": "StructuredDocumentation",
              "src": "1687:124:9",
              "text": "@notice Allows users to unstake their crypto assets\n @dev Entire ETH staking balance is paid back to the investor"
            },
            "functionSelector": "0e29df22",
            "id": 1191,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "sendEther",
            "nameLocation": "1825:9:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1148,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1834:2:9"
            },
            "returnParameters": {
              "id": 1149,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1844:0:9"
            },
            "scope": 1262,
            "src": "1816:451:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1248,
              "nodeType": "Block",
              "src": "2440:557:9",
              "statements": [
                {
                  "documentation": "@notice Staking amount should be greater than 0",
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1199,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 1196,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967281,
                            "src": "2518:3:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 1197,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "2518:9:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 1198,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2530:1:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "2518:13:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e76616c696420616d6f756e7420666f72207374616b696e67",
                        "id": 1200,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2533:28:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b257b1e934d701b679ee811a2b762f8468ef7697dcca50c5076538ec8bfc9e26",
                          "typeString": "literal_string \"Invalid amount for staking\""
                        },
                        "value": "Invalid amount for staking"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b257b1e934d701b679ee811a2b762f8468ef7697dcca50c5076538ec8bfc9e26",
                          "typeString": "literal_string \"Invalid amount for staking\""
                        }
                      ],
                      "id": 1195,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "2510:7:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1201,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2510:52:9",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1202,
                  "nodeType": "ExpressionStatement",
                  "src": "2510:52:9"
                },
                {
                  "expression": {
                    "id": 1209,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1203,
                        "name": "stakingBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1070,
                        "src": "2573:14:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 1206,
                      "indexExpression": {
                        "expression": {
                          "id": 1204,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4294967281,
                          "src": "2588:3:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1205,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2588:10:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2573:26:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "expression": {
                        "id": 1207,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4294967281,
                        "src": "2603:3:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 1208,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "value",
                      "nodeType": "MemberAccess",
                      "src": "2603:9:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2573:39:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1210,
                  "nodeType": "ExpressionStatement",
                  "src": "2573:39:9"
                },
                {
                  "condition": {
                    "id": 1215,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "2708:22:9",
                    "subExpression": {
                      "baseExpression": {
                        "id": 1211,
                        "name": "hasStaked",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1075,
                        "src": "2709:9:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 1214,
                      "indexExpression": {
                        "expression": {
                          "id": 1212,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4294967281,
                          "src": "2719:3:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1213,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2719:10:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "2709:21:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "documentation": "@notice Add user to stakers array only if they haven't staked already",
                  "id": 1224,
                  "nodeType": "IfStatement",
                  "src": "2705:76:9",
                  "trueBody": {
                    "id": 1223,
                    "nodeType": "Block",
                    "src": "2732:49:9",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 1219,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "2759:3:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1220,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "2759:10:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 1216,
                              "name": "stakers",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1065,
                              "src": "2746:7:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                "typeString": "address[] storage ref"
                              }
                            },
                            "id": 1218,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "2746:12:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$bound_to$_t_array$_t_address_$dyn_storage_ptr_$",
                              "typeString": "function (address[] storage pointer,address)"
                            }
                          },
                          "id": 1221,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2746:24:9",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1222,
                        "nodeType": "ExpressionStatement",
                        "src": "2746:24:9"
                      }
                    ]
                  }
                },
                {
                  "documentation": "@notice Update staking status",
                  "expression": {
                    "id": 1230,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1225,
                        "name": "isStaking",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1079,
                        "src": "2833:9:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 1228,
                      "indexExpression": {
                        "expression": {
                          "id": 1226,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4294967281,
                          "src": "2843:3:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1227,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2843:10:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2833:21:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 1229,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2857:4:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "2833:28:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1231,
                  "nodeType": "ExpressionStatement",
                  "src": "2833:28:9"
                },
                {
                  "expression": {
                    "id": 1237,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1232,
                        "name": "hasStaked",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1075,
                        "src": "2871:9:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 1235,
                      "indexExpression": {
                        "expression": {
                          "id": 1233,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4294967281,
                          "src": "2881:3:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1234,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2881:10:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2871:21:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 1236,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2895:4:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "2871:28:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1238,
                  "nodeType": "ExpressionStatement",
                  "src": "2871:28:9"
                },
                {
                  "documentation": "@notice Issue Token Rewards",
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 1242,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4294967281,
                          "src": "2968:3:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1243,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2968:10:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 1244,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4294967281,
                          "src": "2980:3:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1245,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "value",
                        "nodeType": "MemberAccess",
                        "src": "2980:9:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 1239,
                        "name": "aceToken",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1061,
                        "src": "2950:8:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_AceToken_$1016",
                          "typeString": "contract AceToken"
                        }
                      },
                      "id": 1241,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 315,
                      "src": "2950:17:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) external returns (bool)"
                      }
                    },
                    "id": 1246,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2950:40:9",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1247,
                  "nodeType": "ExpressionStatement",
                  "src": "2950:40:9"
                }
              ]
            },
            "documentation": {
              "id": 1192,
              "nodeType": "StructuredDocumentation",
              "src": "2274:120:9",
              "text": "@notice Allows users to stake their crypto assets\n @dev Same value of ACE Tokens are rewarded to the investor"
            },
            "functionSelector": "8f4062d7",
            "id": 1249,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "recieveEther",
            "nameLocation": "2408:12:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1193,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2420:2:9"
            },
            "returnParameters": {
              "id": 1194,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2440:0:9"
            },
            "scope": 1262,
            "src": "2399:598:9",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1260,
              "nodeType": "Block",
              "src": "3164:50:9",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "id": 1255,
                      "name": "stakingBalance",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1070,
                      "src": "3181:14:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 1258,
                    "indexExpression": {
                      "expression": {
                        "id": 1256,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4294967281,
                        "src": "3196:3:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 1257,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "3196:10:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3181:26:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 1254,
                  "id": 1259,
                  "nodeType": "Return",
                  "src": "3174:33:9"
                }
              ]
            },
            "documentation": {
              "id": 1250,
              "nodeType": "StructuredDocumentation",
              "src": "3008:102:9",
              "text": "@notice Returns the staking balance of an investor\n @return Staking balance of the investor"
            },
            "functionSelector": "81b2d07b",
            "id": 1261,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "showBalance",
            "nameLocation": "3124:11:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1251,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3135:2:9"
            },
            "returnParameters": {
              "id": 1254,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1253,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1261,
                  "src": "3158:4:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1252,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3158:4:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3157:6:9"
            },
            "scope": 1262,
            "src": "3115:99:9",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 1263,
        "src": "294:2922:9"
      }
    ],
    "src": "32:3185:9"
  },
  "legacyAST": {
    "absolutePath": "project:/src/contracts/TokenFarm.sol",
    "exportedSymbols": {
      "AceToken": [
        1016
      ],
      "Context": [
        928
      ],
      "ERC20": [
        741
      ],
      "ERC20Burnable": [
        881
      ],
      "IERC20": [
        819
      ],
      "IERC20Metadata": [
        906
      ],
      "Ownable": [
        103
      ],
      "Pausable": [
        195
      ],
      "TokenFarm": [
        1262
      ]
    },
    "id": 1263,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1051,
        "literals": [
          "solidity",
          "0.8",
          ".2"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:22:9"
      },
      {
        "absolutePath": "project:/src/contracts/AceToken.sol",
        "file": "./AceToken.sol",
        "id": 1052,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1263,
        "sourceUnit": 1017,
        "src": "56:24:9",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 1053,
          "nodeType": "StructuredDocumentation",
          "src": "83:211:9",
          "text": "@title Contract for Yield Farming\n @author Alfred Varghese Jose\n @notice Allows users to stake their crypto assets and get ACE Token Rewards\n @dev ETH is the crypto asset used currently for staking"
        },
        "fullyImplemented": true,
        "id": 1262,
        "linearizedBaseContracts": [
          1262
        ],
        "name": "TokenFarm",
        "nameLocation": "303:9:9",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "06fdde03",
            "id": 1056,
            "mutability": "mutable",
            "name": "name",
            "nameLocation": "333:4:9",
            "nodeType": "VariableDeclaration",
            "scope": 1262,
            "src": "319:38:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 1054,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "319:6:9",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "hexValue": "4461707020546f6b656e204661726d",
              "id": 1055,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "340:17:9",
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_112892b16fc49edc60aefbde9609f7bfe1cf220ba7ef93ec6845dbc0b0b30cd5",
                "typeString": "literal_string \"Dapp Token Farm\""
              },
              "value": "Dapp Token Farm"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "8da5cb5b",
            "id": 1058,
            "mutability": "mutable",
            "name": "owner",
            "nameLocation": "378:5:9",
            "nodeType": "VariableDeclaration",
            "scope": 1262,
            "src": "363:20:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1057,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "363:7:9",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "958285a1",
            "id": 1061,
            "mutability": "mutable",
            "name": "aceToken",
            "nameLocation": "405:8:9",
            "nodeType": "VariableDeclaration",
            "scope": 1262,
            "src": "389:24:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_AceToken_$1016",
              "typeString": "contract AceToken"
            },
            "typeName": {
              "id": 1060,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 1059,
                "name": "AceToken",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 1016,
                "src": "389:8:9"
              },
              "referencedDeclaration": 1016,
              "src": "389:8:9",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_AceToken_$1016",
                "typeString": "contract AceToken"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "documentation": {
              "id": 1062,
              "nodeType": "StructuredDocumentation",
              "src": "420:45:9",
              "text": "@notice List of all the current investors"
            },
            "functionSelector": "fd5e6dd1",
            "id": 1065,
            "mutability": "mutable",
            "name": "stakers",
            "nameLocation": "487:7:9",
            "nodeType": "VariableDeclaration",
            "scope": 1262,
            "src": "470:24:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_address_$dyn_storage",
              "typeString": "address[]"
            },
            "typeName": {
              "baseType": {
                "id": 1063,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "470:7:9",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "id": 1064,
              "nodeType": "ArrayTypeName",
              "src": "470:9:9",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                "typeString": "address[]"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "documentation": {
              "id": 1066,
              "nodeType": "StructuredDocumentation",
              "src": "501:65:9",
              "text": "@notice Mapping of investor address and their staking balance"
            },
            "functionSelector": "45bc78ab",
            "id": 1070,
            "mutability": "mutable",
            "name": "stakingBalance",
            "nameLocation": "603:14:9",
            "nodeType": "VariableDeclaration",
            "scope": 1262,
            "src": "571:46:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 1069,
              "keyType": {
                "id": 1067,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "579:7:9",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "571:24:9",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 1068,
                "name": "uint",
                "nodeType": "ElementaryTypeName",
                "src": "590:4:9",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "documentation": {
              "id": 1071,
              "nodeType": "StructuredDocumentation",
              "src": "624:47:9",
              "text": "@notice Mapping of investors staking status"
            },
            "functionSelector": "c93c8f34",
            "id": 1075,
            "mutability": "mutable",
            "name": "hasStaked",
            "nameLocation": "708:9:9",
            "nodeType": "VariableDeclaration",
            "scope": 1262,
            "src": "676:41:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 1074,
              "keyType": {
                "id": 1072,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "684:7:9",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "676:24:9",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 1073,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "695:4:9",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "6f49712b",
            "id": 1079,
            "mutability": "mutable",
            "name": "isStaking",
            "nameLocation": "755:9:9",
            "nodeType": "VariableDeclaration",
            "scope": 1262,
            "src": "723:41:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 1078,
              "keyType": {
                "id": 1076,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "731:7:9",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "723:24:9",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 1077,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "742:4:9",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 1095,
              "nodeType": "Block",
              "src": "970:65:9",
              "statements": [
                {
                  "expression": {
                    "id": 1088,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1086,
                      "name": "aceToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1061,
                      "src": "980:8:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AceToken_$1016",
                        "typeString": "contract AceToken"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1087,
                      "name": "_aceToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1083,
                      "src": "991:9:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AceToken_$1016",
                        "typeString": "contract AceToken"
                      }
                    },
                    "src": "980:20:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_AceToken_$1016",
                      "typeString": "contract AceToken"
                    }
                  },
                  "id": 1089,
                  "nodeType": "ExpressionStatement",
                  "src": "980:20:9"
                },
                {
                  "expression": {
                    "id": 1093,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1090,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1058,
                      "src": "1010:5:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 1091,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4294967281,
                        "src": "1018:3:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 1092,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "1018:10:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1010:18:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1094,
                  "nodeType": "ExpressionStatement",
                  "src": "1010:18:9"
                }
              ]
            },
            "documentation": {
              "id": 1080,
              "nodeType": "StructuredDocumentation",
              "src": "771:162:9",
              "text": "@param _aceToken Reference to an AceToken instance used for initializing TokenFarm contract\n @dev Owner variable set as contract creator for future use"
            },
            "id": 1096,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1084,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1083,
                  "mutability": "mutable",
                  "name": "_aceToken",
                  "nameLocation": "959:9:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 1096,
                  "src": "950:18:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_AceToken_$1016",
                    "typeString": "contract AceToken"
                  },
                  "typeName": {
                    "id": 1082,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1081,
                      "name": "AceToken",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1016,
                      "src": "950:8:9"
                    },
                    "referencedDeclaration": 1016,
                    "src": "950:8:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_AceToken_$1016",
                      "typeString": "contract AceToken"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "949:20:9"
            },
            "returnParameters": {
              "id": 1085,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "970:0:9"
            },
            "scope": 1262,
            "src": "938:97:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1145,
              "nodeType": "Block",
              "src": "1246:434:9",
              "statements": [
                {
                  "documentation": "@notice Only owner can call this function",
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 1104,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 1101,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967281,
                            "src": "1318:3:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 1102,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1318:10:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 1103,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1058,
                          "src": "1332:5:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1318:19:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "63616c6c6572206d75737420626520746865206f776e6572",
                        "id": 1105,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1339:26:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3bfff96132c9b3295fc212b6fbfc1c5174f6f9be7b52a9aff62731c1d8706a0b",
                          "typeString": "literal_string \"caller must be the owner\""
                        },
                        "value": "caller must be the owner"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3bfff96132c9b3295fc212b6fbfc1c5174f6f9be7b52a9aff62731c1d8706a0b",
                          "typeString": "literal_string \"caller must be the owner\""
                        }
                      ],
                      "id": 1100,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "1310:7:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1106,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1310:56:9",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1107,
                  "nodeType": "ExpressionStatement",
                  "src": "1310:56:9"
                },
                {
                  "body": {
                    "id": 1143,
                    "nodeType": "Block",
                    "src": "1466:208:9",
                    "statements": [
                      {
                        "assignments": [
                          1120
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1120,
                            "mutability": "mutable",
                            "name": "recipient",
                            "nameLocation": "1488:9:9",
                            "nodeType": "VariableDeclaration",
                            "scope": 1143,
                            "src": "1480:17:9",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 1119,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1480:7:9",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1124,
                        "initialValue": {
                          "baseExpression": {
                            "id": 1121,
                            "name": "stakers",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1065,
                            "src": "1500:7:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_storage",
                              "typeString": "address[] storage ref"
                            }
                          },
                          "id": 1123,
                          "indexExpression": {
                            "id": 1122,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1109,
                            "src": "1508:1:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "1500:10:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1480:30:9"
                      },
                      {
                        "assignments": [
                          1126
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1126,
                            "mutability": "mutable",
                            "name": "balance",
                            "nameLocation": "1529:7:9",
                            "nodeType": "VariableDeclaration",
                            "scope": 1143,
                            "src": "1524:12:9",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1125,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "1524:4:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1130,
                        "initialValue": {
                          "baseExpression": {
                            "id": 1127,
                            "name": "stakingBalance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1070,
                            "src": "1539:14:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 1129,
                          "indexExpression": {
                            "id": 1128,
                            "name": "recipient",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1120,
                            "src": "1554:9:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "1539:25:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1524:40:9"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1133,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1131,
                            "name": "balance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1126,
                            "src": "1581:7:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1132,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1591:1:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1581:11:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1142,
                        "nodeType": "IfStatement",
                        "src": "1578:86:9",
                        "trueBody": {
                          "id": 1141,
                          "nodeType": "Block",
                          "src": "1594:70:9",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 1137,
                                    "name": "recipient",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1120,
                                    "src": "1630:9:9",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 1138,
                                    "name": "balance",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1126,
                                    "src": "1641:7:9",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "id": 1134,
                                    "name": "aceToken",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1061,
                                    "src": "1612:8:9",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_AceToken_$1016",
                                      "typeString": "contract AceToken"
                                    }
                                  },
                                  "id": 1136,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "transfer",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 315,
                                  "src": "1612:17:9",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                    "typeString": "function (address,uint256) external returns (bool)"
                                  }
                                },
                                "id": 1139,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1612:37:9",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 1140,
                              "nodeType": "ExpressionStatement",
                              "src": "1612:37:9"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1115,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 1112,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1109,
                      "src": "1443:1:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 1113,
                        "name": "stakers",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1065,
                        "src": "1445:7:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage",
                          "typeString": "address[] storage ref"
                        }
                      },
                      "id": 1114,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "1445:14:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1443:16:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "documentation": "@notice Issue dividends to all stakers",
                  "id": 1144,
                  "initializationExpression": {
                    "assignments": [
                      1109
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 1109,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "1438:1:9",
                        "nodeType": "VariableDeclaration",
                        "scope": 1144,
                        "src": "1433:6:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1108,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "1433:4:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 1111,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 1110,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1440:1:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "1433:8:9"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 1117,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "1461:3:9",
                      "subExpression": {
                        "id": 1116,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1109,
                        "src": "1461:1:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 1118,
                    "nodeType": "ExpressionStatement",
                    "src": "1461:3:9"
                  },
                  "nodeType": "ForStatement",
                  "src": "1428:246:9"
                }
              ]
            },
            "documentation": {
              "id": 1097,
              "nodeType": "StructuredDocumentation",
              "src": "1042:169:9",
              "text": "@notice Allows contract owners to issue dividends for investors\n @dev Addresses in stakers array will recieve dividends equal to their current staking balance"
            },
            "functionSelector": "60ab5852",
            "id": 1146,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "issueTokens",
            "nameLocation": "1225:11:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1098,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1236:2:9"
            },
            "returnParameters": {
              "id": 1099,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1246:0:9"
            },
            "scope": 1262,
            "src": "1216:464:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1190,
              "nodeType": "Block",
              "src": "1844:423:9",
              "statements": [
                {
                  "documentation": "@notice Staking balance amount should be greater than 0",
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1156,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 1151,
                            "name": "stakingBalance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1070,
                            "src": "1930:14:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 1154,
                          "indexExpression": {
                            "expression": {
                              "id": 1152,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "1945:3:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1153,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "1945:10:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "1930:26:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 1155,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1959:1:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "1930:30:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e73756666696369656e742062616c616e6365",
                        "id": 1157,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1962:22:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                          "typeString": "literal_string \"Insufficient balance\""
                        },
                        "value": "Insufficient balance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                          "typeString": "literal_string \"Insufficient balance\""
                        }
                      ],
                      "id": 1150,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "1922:7:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1158,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1922:63:9",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1159,
                  "nodeType": "ExpressionStatement",
                  "src": "1922:63:9"
                },
                {
                  "assignments": [
                    1161
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1161,
                      "mutability": "mutable",
                      "name": "ethBalance",
                      "nameLocation": "2001:10:9",
                      "nodeType": "VariableDeclaration",
                      "scope": 1190,
                      "src": "1996:15:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1160,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "1996:4:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1166,
                  "initialValue": {
                    "baseExpression": {
                      "id": 1162,
                      "name": "stakingBalance",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1070,
                      "src": "2014:14:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 1165,
                    "indexExpression": {
                      "expression": {
                        "id": 1163,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4294967281,
                        "src": "2029:3:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 1164,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "2029:10:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "2014:26:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1996:44:9"
                },
                {
                  "documentation": "@notice Update staking status",
                  "expression": {
                    "id": 1172,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1167,
                        "name": "stakingBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1070,
                        "src": "2093:14:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 1170,
                      "indexExpression": {
                        "expression": {
                          "id": 1168,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4294967281,
                          "src": "2108:3:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1169,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2108:10:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2093:26:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "30",
                      "id": 1171,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2122:1:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "2093:30:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1173,
                  "nodeType": "ExpressionStatement",
                  "src": "2093:30:9"
                },
                {
                  "expression": {
                    "id": 1179,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1174,
                        "name": "isStaking",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1079,
                        "src": "2133:9:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 1177,
                      "indexExpression": {
                        "expression": {
                          "id": 1175,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4294967281,
                          "src": "2143:3:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1176,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2143:10:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2133:21:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "66616c7365",
                      "id": 1178,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2157:5:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "2133:29:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1180,
                  "nodeType": "ExpressionStatement",
                  "src": "2133:29:9"
                },
                {
                  "documentation": "@notice Send ETH back to investor",
                  "expression": {
                    "arguments": [
                      {
                        "id": 1187,
                        "name": "ethBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1161,
                        "src": "2248:10:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 1183,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "2227:3:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1184,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "2227:10:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1182,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2219:8:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_payable_$",
                            "typeString": "type(address payable)"
                          },
                          "typeName": {
                            "id": 1181,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "2219:8:9",
                            "stateMutability": "payable",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1185,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2219:19:9",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "id": 1186,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "src": "2219:28:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 1188,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2219:40:9",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1189,
                  "nodeType": "ExpressionStatement",
                  "src": "2219:40:9"
                }
              ]
            },
            "documentation": {
              "id": 1147,
              "nodeType": "StructuredDocumentation",
              "src": "1687:124:9",
              "text": "@notice Allows users to unstake their crypto assets\n @dev Entire ETH staking balance is paid back to the investor"
            },
            "functionSelector": "0e29df22",
            "id": 1191,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "sendEther",
            "nameLocation": "1825:9:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1148,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1834:2:9"
            },
            "returnParameters": {
              "id": 1149,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1844:0:9"
            },
            "scope": 1262,
            "src": "1816:451:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1248,
              "nodeType": "Block",
              "src": "2440:557:9",
              "statements": [
                {
                  "documentation": "@notice Staking amount should be greater than 0",
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1199,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 1196,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967281,
                            "src": "2518:3:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 1197,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "2518:9:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 1198,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2530:1:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "2518:13:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e76616c696420616d6f756e7420666f72207374616b696e67",
                        "id": 1200,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2533:28:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b257b1e934d701b679ee811a2b762f8468ef7697dcca50c5076538ec8bfc9e26",
                          "typeString": "literal_string \"Invalid amount for staking\""
                        },
                        "value": "Invalid amount for staking"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b257b1e934d701b679ee811a2b762f8468ef7697dcca50c5076538ec8bfc9e26",
                          "typeString": "literal_string \"Invalid amount for staking\""
                        }
                      ],
                      "id": 1195,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "2510:7:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1201,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2510:52:9",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1202,
                  "nodeType": "ExpressionStatement",
                  "src": "2510:52:9"
                },
                {
                  "expression": {
                    "id": 1209,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1203,
                        "name": "stakingBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1070,
                        "src": "2573:14:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 1206,
                      "indexExpression": {
                        "expression": {
                          "id": 1204,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4294967281,
                          "src": "2588:3:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1205,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2588:10:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2573:26:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "expression": {
                        "id": 1207,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4294967281,
                        "src": "2603:3:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 1208,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "value",
                      "nodeType": "MemberAccess",
                      "src": "2603:9:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2573:39:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1210,
                  "nodeType": "ExpressionStatement",
                  "src": "2573:39:9"
                },
                {
                  "condition": {
                    "id": 1215,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "2708:22:9",
                    "subExpression": {
                      "baseExpression": {
                        "id": 1211,
                        "name": "hasStaked",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1075,
                        "src": "2709:9:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 1214,
                      "indexExpression": {
                        "expression": {
                          "id": 1212,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4294967281,
                          "src": "2719:3:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1213,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2719:10:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "2709:21:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "documentation": "@notice Add user to stakers array only if they haven't staked already",
                  "id": 1224,
                  "nodeType": "IfStatement",
                  "src": "2705:76:9",
                  "trueBody": {
                    "id": 1223,
                    "nodeType": "Block",
                    "src": "2732:49:9",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 1219,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "2759:3:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1220,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "2759:10:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 1216,
                              "name": "stakers",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1065,
                              "src": "2746:7:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                "typeString": "address[] storage ref"
                              }
                            },
                            "id": 1218,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "2746:12:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$bound_to$_t_array$_t_address_$dyn_storage_ptr_$",
                              "typeString": "function (address[] storage pointer,address)"
                            }
                          },
                          "id": 1221,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2746:24:9",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1222,
                        "nodeType": "ExpressionStatement",
                        "src": "2746:24:9"
                      }
                    ]
                  }
                },
                {
                  "documentation": "@notice Update staking status",
                  "expression": {
                    "id": 1230,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1225,
                        "name": "isStaking",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1079,
                        "src": "2833:9:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 1228,
                      "indexExpression": {
                        "expression": {
                          "id": 1226,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4294967281,
                          "src": "2843:3:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1227,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2843:10:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2833:21:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 1229,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2857:4:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "2833:28:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1231,
                  "nodeType": "ExpressionStatement",
                  "src": "2833:28:9"
                },
                {
                  "expression": {
                    "id": 1237,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1232,
                        "name": "hasStaked",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1075,
                        "src": "2871:9:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 1235,
                      "indexExpression": {
                        "expression": {
                          "id": 1233,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4294967281,
                          "src": "2881:3:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1234,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2881:10:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2871:21:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 1236,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2895:4:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "2871:28:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1238,
                  "nodeType": "ExpressionStatement",
                  "src": "2871:28:9"
                },
                {
                  "documentation": "@notice Issue Token Rewards",
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 1242,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4294967281,
                          "src": "2968:3:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1243,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2968:10:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 1244,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4294967281,
                          "src": "2980:3:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1245,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "value",
                        "nodeType": "MemberAccess",
                        "src": "2980:9:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 1239,
                        "name": "aceToken",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1061,
                        "src": "2950:8:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_AceToken_$1016",
                          "typeString": "contract AceToken"
                        }
                      },
                      "id": 1241,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 315,
                      "src": "2950:17:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) external returns (bool)"
                      }
                    },
                    "id": 1246,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2950:40:9",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1247,
                  "nodeType": "ExpressionStatement",
                  "src": "2950:40:9"
                }
              ]
            },
            "documentation": {
              "id": 1192,
              "nodeType": "StructuredDocumentation",
              "src": "2274:120:9",
              "text": "@notice Allows users to stake their crypto assets\n @dev Same value of ACE Tokens are rewarded to the investor"
            },
            "functionSelector": "8f4062d7",
            "id": 1249,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "recieveEther",
            "nameLocation": "2408:12:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1193,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2420:2:9"
            },
            "returnParameters": {
              "id": 1194,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2440:0:9"
            },
            "scope": 1262,
            "src": "2399:598:9",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1260,
              "nodeType": "Block",
              "src": "3164:50:9",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "id": 1255,
                      "name": "stakingBalance",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1070,
                      "src": "3181:14:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 1258,
                    "indexExpression": {
                      "expression": {
                        "id": 1256,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4294967281,
                        "src": "3196:3:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 1257,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "3196:10:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3181:26:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 1254,
                  "id": 1259,
                  "nodeType": "Return",
                  "src": "3174:33:9"
                }
              ]
            },
            "documentation": {
              "id": 1250,
              "nodeType": "StructuredDocumentation",
              "src": "3008:102:9",
              "text": "@notice Returns the staking balance of an investor\n @return Staking balance of the investor"
            },
            "functionSelector": "81b2d07b",
            "id": 1261,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "showBalance",
            "nameLocation": "3124:11:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1251,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3135:2:9"
            },
            "returnParameters": {
              "id": 1254,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1253,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1261,
                  "src": "3158:4:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1252,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3158:4:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3157:6:9"
            },
            "scope": 1262,
            "src": "3115:99:9",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 1263,
        "src": "294:2922:9"
      }
    ],
    "src": "32:3185:9"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.2+commit.661d1103.Emscripten.clang"
  },
  "networks": {
    "3": {
      "events": {},
      "links": {},
      "address": "0x8043E5721237a2D2D7A0cdc2B478037191851D08",
      "transactionHash": "0xc1dbb08f6a190b36faf6e6541557d549f2821667759d8abb472b1179a3163035"
    },
    "5777": {
      "events": {},
      "links": {},
      "address": "0xad4560306BC37546c0eEf2A97F0B017A236b5f4A",
      "transactionHash": "0x278e59b7924686caa2e7124474389f79127f3cc65d4495596bd7be0452460851"
    }
  },
  "schemaVersion": "3.4.3",
  "updatedAt": "2021-11-30T07:59:26.759Z",
  "networkType": "ethereum",
  "devdoc": {
    "author": "Alfred Varghese Jose",
    "details": "ETH is the crypto asset used currently for staking",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Owner variable set as contract creator for future use",
        "params": {
          "_aceToken": "Reference to an AceToken instance used for initializing TokenFarm contract"
        }
      },
      "issueTokens()": {
        "details": "Addresses in stakers array will recieve dividends equal to their current staking balance"
      },
      "recieveEther()": {
        "details": "Same value of ACE Tokens are rewarded to the investor"
      },
      "sendEther()": {
        "details": "Entire ETH staking balance is paid back to the investor"
      },
      "showBalance()": {
        "returns": {
          "_0": "Staking balance of the investor"
        }
      }
    },
    "title": "Contract for Yield Farming",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "hasStaked(address)": {
        "notice": "Mapping of investors staking status"
      },
      "issueTokens()": {
        "notice": "Allows contract owners to issue dividends for investors"
      },
      "recieveEther()": {
        "notice": "Allows users to stake their crypto assets"
      },
      "sendEther()": {
        "notice": "Allows users to unstake their crypto assets"
      },
      "showBalance()": {
        "notice": "Returns the staking balance of an investor"
      },
      "stakers(uint256)": {
        "notice": "List of all the current investors"
      },
      "stakingBalance(address)": {
        "notice": "Mapping of investor address and their staking balance"
      }
    },
    "notice": "Allows users to stake their crypto assets and get ACE Token Rewards",
    "version": 1
  }
}